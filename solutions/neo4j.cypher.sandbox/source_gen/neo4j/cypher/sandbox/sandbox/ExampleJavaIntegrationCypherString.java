package neo4j.cypher.sandbox.sandbox;

/*Generated by MPS */

import java.util.Map;
import java.util.HashMap;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.cypher.javacompat.ExecutionResult;

public class ExampleJavaIntegrationCypherString {
  public static void main(String[] args) {

    System.out.println("Running ExampleCypherStringUsage");

    Map<String, String> config = new HashMap<String, String>();
    config.put("neostore.nodestore.db.mapped_memory", "10M");
    config.put("string_block_size", "60");
    config.put("array_block_size", "300");

    GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabaseBuilder("solutions/neo4j.cypher.runtime/database").setConfig(config).newGraphDatabase();

    System.out.println("Start of querying into cypher");

    ExecutionEngine engine = new ExecutionEngine(graphDb);

    String cypherRWQuery = "START kk = node(*), dfs1231 = node(*) MATCH kk, dfs1231 CREATE kk--kk, kk--dfs1231 CREATE (nodik{vlastnost1:\"hodnot\"a1\"}) SET kk = kk, kk.sdfss = \"sd\'f\" DELETE dfs1231 RETURN kk ORDER BY kk.dfaaaa SKIP 34 LIMIT 63 ";

    String pureStringQuery = "start n=node(*) where n.name! = 'my node' return n, n.name";
    String neo4jCypherString = "START n = node(*) WHERE n.name! = \"my node\" RETURN n,n.name ORDER BY n.name ";

    System.out.println("Pure query string: " + pureStringQuery);
    executeAndwriteResult(pureStringQuery, engine);

    System.out.println("Neo4jCypherString: " + neo4jCypherString);
    executeAndwriteResult(neo4jCypherString, engine);

    System.out.println("End of querying into cypher");
  }



  public static void executeAndwriteResult(String query, ExecutionEngine engine) {
    ExecutionResult result = engine.execute(query);
    System.out.println("Result:" + result);
  }
}
