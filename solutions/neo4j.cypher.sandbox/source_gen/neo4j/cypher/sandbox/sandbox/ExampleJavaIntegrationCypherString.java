package neo4j.cypher.sandbox.sandbox;

/*Generated by MPS */

import java.util.Map;
import java.util.HashMap;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.cypher.javacompat.ExecutionResult;
import org.neo4j.graphdb.ResourceIterator;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;

public class ExampleJavaIntegrationCypherString {


  public static void main(String[] args) {

    System.out.println("Running " + ExampleJavaIntegrationCypherString.class.getCanonicalName());

    Map<String, String> config = new HashMap<String, String>();
    config.put("neostore.nodestore.db.mapped_memory", "10M");
    config.put("string_block_size", "60");
    config.put("array_block_size", "300");

    GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabaseBuilder("solutions/neo4j.cypher.runtime/database").setConfig(config).newGraphDatabase();

    System.out.println("Start of querying into cypher");

    ExecutionEngine engine = new ExecutionEngine(graphDb);

    String pureStringQuery = "start n=node(*) where n.name! = 'my node' return n, n.name";
    String neo4jCypherWriteOnlyQueryString = "CREATE (n{name:\"my node\"}) ";

    String neo4jCypherReadOnlyQueryString = "START n = node(*) WHERE n.name = \"my node\" RETURN n,n.name ";

    String neo4jCypherReadWriteQueryString = "START n = node(*) WHERE n.name = \"my node\" SET n.name = \"my new node\" RETURN n,n.name ";

    System.out.println("Pure query string: " + pureStringQuery);
    executeAndwriteResult(pureStringQuery, engine);

    System.out.println("neo4jCypherWriteOnlyQueryString: " + neo4jCypherWriteOnlyQueryString);
    executeAndwriteResult(neo4jCypherWriteOnlyQueryString, engine);

    System.out.println("neo4jCypherReadOnlyQueryString: " + neo4jCypherReadOnlyQueryString);
    executeAndwriteResult(neo4jCypherReadOnlyQueryString, engine);

    System.out.println("neo4jCypherReadWriteQueryString: " + neo4jCypherReadWriteQueryString);
    executeAndwriteResult(neo4jCypherReadWriteQueryString, engine);

    System.out.println("End of querying into cypher");
  }



  public static void executeAndwriteResult(String query, ExecutionEngine engine) {
    ExecutionResult result = engine.execute(query);

    System.out.println("Result:");

    ResourceIterator<Map<String, Object>> iterator = result.iterator();
    while (iterator.hasNext()) {
      for (IMapping<String, Object> i : MapSequence.fromMap(iterator.next())) {
        // <node> 
        System.out.println(" -- " + i.key() + "=" + i.value());
      }
    }
  }
}
