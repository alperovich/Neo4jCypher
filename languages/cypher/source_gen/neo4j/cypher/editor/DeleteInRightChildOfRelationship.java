package neo4j.cypher.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import neo4j.cypher.behavior.Relationship_Behavior;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;

public class DeleteInRightChildOfRelationship {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new DeleteInRightChildOfRelationship.DeleteInRightChildOfRelationship_DELETE(node));
  }

  public static class DeleteInRightChildOfRelationship_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public DeleteInRightChildOfRelationship_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode currentNode = node;
      while ((currentNode != null) && SNodeOperations.hasRole(currentNode, "neo4j.cypher.structure.Relationship", "rightExpression")) {
        currentNode = SNodeOperations.getParent(currentNode);
      }
      if ((currentNode == null)) {
        return;
      }
      SNode parent = SNodeOperations.getParent(currentNode);

      if (SNodeOperations.isInstanceOf(parent, "neo4j.cypher.structure.RLRelationship")) {
        SNode uni = SConceptOperations.createNewNode("neo4j.cypher.structure.UndirectedRelationship", null);
        Relationship_Behavior.call_copyRelationshipProperties_6581467451102927870(uni, SNodeOperations.cast(parent, "neo4j.cypher.structure.Relationship"));
        SNodeOperations.replaceWithAnother(parent, uni);
      } else {
        SNodeOperations.replaceWithAnother(parent, currentNode);
      }
      SelectionUtil.selectLabelCellAnSetCaret(editorContext, currentNode, SelectionManager.LAST_CELL, -1);
    }
  }
}
