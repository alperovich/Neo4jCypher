package neo4j.cypher.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      Integer preIndex = indices_xbvbvu_a0a.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new AggregateFunction_Editor());
          }
          break;
        case 1:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new AllExpression_Editor());
          }
          break;
        case 2:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new AllIndex_Editor());
          }
          break;
        case 3:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ApStringLiteral_Editor());
          }
          break;
        case 4:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new AsExpression_Editor());
          }
          break;
        case 5:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new AscOrderBy_Editor());
          }
          break;
        case 6:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CoalesceScalarFunction_Editor());
          }
          break;
        case 7:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Collection_Editor());
          }
          break;
        case 8:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ConnectionSheet_Editor());
          }
          break;
        case 9:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CreateStatement_Editor());
          }
          break;
        case 10:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherAndExpression_Editor());
          }
          break;
        case 11:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherDotExpression_Editor());
          }
          break;
        case 12:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherIntegerConstant_Editor());
          }
          break;
        case 13:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherNotExpression_Editor());
          }
          break;
        case 14:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherOrExpression_Editor());
          }
          break;
        case 15:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherQueryExecuteMethod_Editor());
          }
          break;
        case 16:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherQueryStringType_Editor());
          }
          break;
        case 17:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherQueryTupleType_Editor());
          }
          break;
        case 18:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherResultIteratorHasNextMethod_Editor());
          }
          break;
        case 19:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherResultIteratorMethod_Editor());
          }
          break;
        case 20:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherResultIteratorNextMethod_Editor());
          }
          break;
        case 21:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherResultIteratorTupleType_Editor());
          }
          break;
        case 22:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherResultRowTupleType_Editor());
          }
          break;
        case 23:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new CypherResultTupleType_Editor());
          }
          break;
        case 24:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new DeleteExpression_Editor());
          }
          break;
        case 25:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new DeleteStatement_Editor());
          }
          break;
        case 26:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new DescOrderBy_Editor());
          }
          break;
        case 27:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new DistinctExpression_Editor());
          }
          break;
        case 28:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new EmbeddedConnection_Editor());
          }
          break;
        case 29:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new EmptyConnectionStatement_Editor());
          }
          break;
        case 30:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new EmptyNode_Editor());
          }
          break;
        case 31:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ExtractCollFunction_Editor());
          }
          break;
        case 32:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new HeadScalarFunction_Editor());
          }
          break;
        case 33:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new IdIndex_Editor());
          }
          break;
        case 34:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new IdScalarFunction_Editor());
          }
          break;
        case 35:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ImpermanentConnection_Editor());
          }
          break;
        case 36:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Index_Editor());
          }
          break;
        case 37:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new IndexedCypherResultRowMemberAccessExpression_Editor());
          }
          break;
        case 38:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new KeyValueNodeIndex_Editor());
          }
          break;
        case 39:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new KeyValueRelationshipIndex_Editor());
          }
          break;
        case 40:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new LRRelationship_Editor());
          }
          break;
        case 41:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new LTrimMStringFunction_Editor());
          }
          break;
        case 42:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new LastScalarFunction_Editor());
          }
          break;
        case 43:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new LeftMStringFunction_Editor());
          }
          break;
        case 44:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new LengthScalarFunction_Editor());
          }
          break;
        case 45:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new LimitStatement_Editor());
          }
          break;
        case 46:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new LowerMStringFunction_Editor());
          }
          break;
        case 47:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new LuceneIndex_Editor());
          }
          break;
        case 48:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new MatchStatement_Editor());
          }
          break;
        case 49:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new MathFunction_Editor());
          }
          break;
        case 50:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new NamedNodeRef_Editor());
          }
          break;
        case 51:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new NamedPathRef_Editor());
          }
          break;
        case 52:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new NamedPropertyContainerRef_Editor());
          }
          break;
        case 53:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new NamedRelationshipRef_Editor());
          }
          break;
        case 54:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Neo4jExec_Editor());
          }
          break;
        case 55:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Node_Editor());
          }
          break;
        case 56:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new NodeType_Editor());
          }
          break;
        case 57:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new NodesCollFunction_Editor());
          }
          break;
        case 58:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new OrderByStatement_Editor());
          }
          break;
        case 59:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Parameter_Editor());
          }
          break;
        case 60:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new PathExpression_Editor());
          }
          break;
        case 61:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new PathFunction_Editor());
          }
          break;
        case 62:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new PredicateExpression_Editor());
          }
          break;
        case 63:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new PredicateFunction_Editor());
          }
          break;
        case 64:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Property_Editor());
          }
          break;
        case 65:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new PropertyOperation_Editor());
          }
          break;
        case 66:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new QueryEmptyStatement_Editor());
          }
          break;
        case 67:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new QuerySheet_Editor());
          }
          break;
        case 68:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new QueryStringStatement_Editor());
          }
          break;
        case 69:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new QueryStringStatmentUntyped_Editor());
          }
          break;
        case 70:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new QueryStringVisualisationStatement_Editor());
          }
          break;
        case 71:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new QueryTupleStatement_Editor());
          }
          break;
        case 72:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new RLRelationship_Editor());
          }
          break;
        case 73:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new RTrimMStringFunction_Editor());
          }
          break;
        case 74:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new RangeCollFunction_Editor());
          }
          break;
        case 75:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ReadOnlyQueryExpression_Editor());
          }
          break;
        case 76:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ReadWriteQueryExpression_Editor());
          }
          break;
        case 77:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new RelationshipType_Editor());
          }
          break;
        case 78:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new RelationshipsCollFunction_Editor());
          }
          break;
        case 79:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ReplaceMStringFunction_Editor());
          }
          break;
        case 80:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ReturnStatement_Editor());
          }
          break;
        case 81:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new ReturnStatementBlock_Editor());
          }
          break;
        case 82:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new RightMStringFunction_Editor());
          }
          break;
        case 83:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new SetAssignmentStatement_Editor());
          }
          break;
        case 84:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new SetStatement_Editor());
          }
          break;
        case 85:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new SkipStatement_Editor());
          }
          break;
        case 86:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new StartAssignmentStatement_Editor());
          }
          break;
        case 87:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new StartStatement_Editor());
          }
          break;
        case 88:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new StrStringFunction_Editor());
          }
          break;
        case 89:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new SubstringMStringFunction_Editor());
          }
          break;
        case 90:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new TailCollFunction_Editor());
          }
          break;
        case 91:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new TimestampScalarFunction_Editor());
          }
          break;
        case 92:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new TrimMStringFunction_Editor());
          }
          break;
        case 93:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new TypeScalarFunction_Editor());
          }
          break;
        case 94:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new UndirectedRelationship_Editor());
          }
          break;
        case 95:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new UpperMStringFunction_Editor());
          }
          break;
        case 96:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new WhereStatement_Editor());
          }
          break;
        case 97:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new WithStatement_Editor());
          }
          break;
        case 98:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new WriteOnlyQueryExpression_Editor());
          }
          break;
        default:
      }
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      Integer preIndex = indices_xbvbvu_a0c.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            if ("neo4j.cypher.editor.Relationship_MiddleCell".equals(editorComponentId)) {
              return Collections.<ConceptEditorComponent>singletonList(new Relationship_MiddleCell());
            }
          }
          break;
        default:
      }
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_xbvbvu_a0e.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return Collections.<TransformationMenu>singletonList(new CypherResultRowIndexed_Contribution());
          }
          break;
        default:
      }
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    {
      SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
      Integer preIndex = indices_xbvbvu_a0f.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a3a0a5, menuId.getFqName())) {
              case 0:
                return Arrays.asList(new TransformationMenu[]{new RelationshipTypeChanges()});
              case 1:
                return Arrays.asList(new TransformationMenu[]{new RelationshipTypeChanges_ext_2()});
              case 2:
                return Arrays.asList(new TransformationMenu[]{new RelationshipTypeChanges_ext_3()});
              default:
            }
          }
          break;
        default:
      }
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_xbvbvu_a0g.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new cypheroperations_Contribution());
          }
          break;
        case 1:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new CypherIntegerConstant_SubstituteMenu());
          }
          break;
        case 2:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new cypherconstants_Contribution());
          }
          break;
        case 3:
          if (true) {
            return Collections.<SubstituteMenu>singletonList(new IndexedCypherResultRowMemberAccessExpression_SubstituteMenu());
          }
          break;
        default:
      }
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0a = buildConceptIndices(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcc89daL, "neo4j.cypher.structure.AggregateFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d5662cL, "neo4j.cypher.structure.AllExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bb83bcL, "neo4j.cypher.structure.AllIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042432e2L, "neo4j.cypher.structure.ApStringLiteral"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d4d5adL, "neo4j.cypher.structure.AsExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6607a8a1c5b01e59L, "neo4j.cypher.structure.AscOrderBy"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c133e4L, "neo4j.cypher.structure.CoalesceScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042c0fbfL, "neo4j.cypher.structure.Collection"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe2431a79cL, "neo4j.cypher.structure.ConnectionSheet"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d600d9L, "neo4j.cypher.structure.CreateStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104307f52L, "neo4j.cypher.structure.CypherAndExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4cbf2dbb00e40afbL, "neo4j.cypher.structure.CypherDotExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa51802cL, "neo4j.cypher.structure.CypherIntegerConstant"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104307f65L, "neo4j.cypher.structure.CypherNotExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104307f56L, "neo4j.cypher.structure.CypherOrExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3340f286fb406a31L, "neo4j.cypher.structure.CypherQueryExecuteMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x36087ce47f5b9b0eL, "neo4j.cypher.structure.CypherQueryStringType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x52178e892162ba1aL, "neo4j.cypher.structure.CypherQueryTupleType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b0458d7eL, "neo4j.cypher.structure.CypherResultIteratorHasNextMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b02c7309L, "neo4j.cypher.structure.CypherResultIteratorMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b0587485L, "neo4j.cypher.structure.CypherResultIteratorNextMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b02ee751L, "neo4j.cypher.structure.CypherResultIteratorTupleType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b0585cf2L, "neo4j.cypher.structure.CypherResultRowTupleType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3340f286fb2bc7faL, "neo4j.cypher.structure.CypherResultTupleType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x7a3bb6c9eea6c006L, "neo4j.cypher.structure.DeleteExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d6010bL, "neo4j.cypher.structure.DeleteStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6607a8a1c5b01e63L, "neo4j.cypher.structure.DescOrderBy"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24317afdL, "neo4j.cypher.structure.DistinctExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6f4f64f8bdf7e2fdL, "neo4j.cypher.structure.EmbeddedConnection"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe2431a7b5L, "neo4j.cypher.structure.EmptyConnectionStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d300249aaeec6c6L, "neo4j.cypher.structure.EmptyNode"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x44ca2c77377271dL, "neo4j.cypher.structure.ExtractCollFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d3fd21L, "neo4j.cypher.structure.HeadScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bb8384L, "neo4j.cypher.structure.IdIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c133e2L, "neo4j.cypher.structure.IdScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe2431d7b0L, "neo4j.cypher.structure.ImpermanentConnection"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bb837bL, "neo4j.cypher.structure.Index"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b06a1554L, "neo4j.cypher.structure.IndexedCypherResultRowMemberAccessExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bb837eL, "neo4j.cypher.structure.KeyValueNodeIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da99930L, "neo4j.cypher.structure.KeyValueRelationshipIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcc2439L, "neo4j.cypher.structure.LRRelationship"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4e3ee5L, "neo4j.cypher.structure.LTrimMStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d43f1bL, "neo4j.cypher.structure.LastScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4e3ec4L, "neo4j.cypher.structure.LeftMStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d48762L, "neo4j.cypher.structure.LengthScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4d5ba0408a4bacceL, "neo4j.cypher.structure.LimitStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4e3f18L, "neo4j.cypher.structure.LowerMStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bb8381L, "neo4j.cypher.structure.LuceneIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24307713L, "neo4j.cypher.structure.MatchStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d43f1eL, "neo4j.cypher.structure.MathFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe2434a1cdL, "neo4j.cypher.structure.NamedNodeRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da6df9bL, "neo4j.cypher.structure.NamedPathRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c16436L, "neo4j.cypher.structure.NamedPropertyContainerRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c16494L, "neo4j.cypher.structure.NamedRelationshipRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x52178e8920cb2b25L, "neo4j.cypher.structure.Neo4jExec"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e11L, "neo4j.cypher.structure.Node"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x30b8c283b3c55a42L, "neo4j.cypher.structure.NodeType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d4875dL, "neo4j.cypher.structure.NodesCollFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4cbf2dbb00e59362L, "neo4j.cypher.structure.OrderByStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042a6ce7L, "neo4j.cypher.structure.Parameter"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da444f2L, "neo4j.cypher.structure.PathExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da776d7L, "neo4j.cypher.structure.PathFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042c9047L, "neo4j.cypher.structure.PredicateExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042c9027L, "neo4j.cypher.structure.PredicateFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24361f8bL, "neo4j.cypher.structure.Property"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2bf84db8340e211fL, "neo4j.cypher.structure.PropertyOperation"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bc42f4L, "neo4j.cypher.structure.QueryEmptyStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303b7d8aeL, "neo4j.cypher.structure.QuerySheet"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x36087ce47f4eb88eL, "neo4j.cypher.structure.QueryStringStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x79554654e75f67e1L, "neo4j.cypher.structure.QueryStringStatmentUntyped"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1b6d8ae4aaea244cL, "neo4j.cypher.structure.QueryStringVisualisationStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303b80605L, "neo4j.cypher.structure.QueryTupleStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcc43a1L, "neo4j.cypher.structure.RLRelationship"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4e3efeL, "neo4j.cypher.structure.RTrimMStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1bff14aL, "neo4j.cypher.structure.RangeCollFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e05L, "neo4j.cypher.structure.ReadOnlyQueryExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, "neo4j.cypher.structure.ReadWriteQueryExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcb3742L, "neo4j.cypher.structure.RelationshipType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d48761L, "neo4j.cypher.structure.RelationshipsCollFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4dea4eL, "neo4j.cypher.structure.ReplaceMStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24389e5eL, "neo4j.cypher.structure.ReturnStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2959fa271e1707a3L, "neo4j.cypher.structure.ReturnStatementBlock"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4e3ed9L, "neo4j.cypher.structure.RightMStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0xaaeb60067637537L, "neo4j.cypher.structure.SetAssignmentStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d600edL, "neo4j.cypher.structure.SetStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2959fa271e1657eaL, "neo4j.cypher.structure.SkipStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e10L, "neo4j.cypher.structure.StartAssignmentStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe2438aca4L, "neo4j.cypher.structure.StartStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4dea3eL, "neo4j.cypher.structure.StrStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4df204L, "neo4j.cypher.structure.SubstringMStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d43f18L, "neo4j.cypher.structure.TailCollFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d300249aae5f5ffL, "neo4j.cypher.structure.TimestampScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4e3f0cL, "neo4j.cypher.structure.TrimMStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c133e1L, "neo4j.cypher.structure.TypeScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcc64edL, "neo4j.cypher.structure.UndirectedRelationship"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4f4219L, "neo4j.cypher.structure.UpperMStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24307714L, "neo4j.cypher.structure.WhereStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x682da1dc24319e52L, "neo4j.cypher.structure.WithStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa5L, "neo4j.cypher.structure.WriteOnlyQueryExpression"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0c = buildConceptIndices(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x637ffba7f2948fabL, "neo4j.cypher.structure.Relationship"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0e = buildConceptIndices(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "jetbrains.mps.baseLanguage.structure.Expression"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0f = buildConceptIndices(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x637ffba7f2948fabL, "neo4j.cypher.structure.Relationship"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0g = buildConceptIndices(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1196792d150L, "jetbrains.mps.baseLanguage.structure.AbstractOperation"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa51802cL, "neo4j.cypher.structure.CypherIntegerConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "jetbrains.mps.baseLanguage.structure.Expression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b06a1554L, "neo4j.cypher.structure.IndexedCypherResultRowMemberAccessExpression"));
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a3a0a5 = new String[]{"neo4j.cypher.editor.RelationshipTypeChanges", "neo4j.cypher.editor.RelationshipTypeChanges_ext_2", "neo4j.cypher.editor.RelationshipTypeChanges_ext_3"};
}
