package neo4j.cypher.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.BinaryOperation;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Relationship extends BinaryOperation implements ICypherExpression, IPropertyContainer, IMatchExpression, ICreateExpression {
  public static final String concept = "neo4j.cypher.structure.Relationship";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAME = "name";
  public static final String CONCRETE = "concrete";
  public static final String SPECIFY_HOPS = "specifyHops";
  public static final String IN_DEFINITION_MODE = "inDefinitionMode";
  public static final String MIN_HOPS = "minHops";
  public static final String MAX_HOPS = "maxHops";
  public static final String TYPE = "type";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";
  public static final String PROPERTY = "property";

  public Relationship(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(Relationship.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Relationship.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Relationship.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Relationship.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Relationship.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Relationship.VIRTUAL_PACKAGE, value);
  }

  public String getName() {
    return this.getProperty(Relationship.NAME);
  }

  public void setName(String value) {
    this.setProperty(Relationship.NAME, value);
  }

  public boolean getConcrete() {
    return this.getBooleanProperty(Relationship.CONCRETE);
  }

  public void setConcrete(boolean value) {
    this.setBooleanProperty(Relationship.CONCRETE, value);
  }

  public boolean getSpecifyHops() {
    return this.getBooleanProperty(Relationship.SPECIFY_HOPS);
  }

  public void setSpecifyHops(boolean value) {
    this.setBooleanProperty(Relationship.SPECIFY_HOPS, value);
  }

  public boolean getInDefinitionMode() {
    return this.getBooleanProperty(Relationship.IN_DEFINITION_MODE);
  }

  public void setInDefinitionMode(boolean value) {
    this.setBooleanProperty(Relationship.IN_DEFINITION_MODE, value);
  }

  public int getMinHops() {
    return this.getIntegerProperty(Relationship.MIN_HOPS);
  }

  public void setMinHops(int value) {
    this.setIntegerProperty(Relationship.MIN_HOPS, value);
  }

  public int getMaxHops() {
    return this.getIntegerProperty(Relationship.MAX_HOPS);
  }

  public void setMaxHops(int value) {
    this.setIntegerProperty(Relationship.MAX_HOPS, value);
  }

  public int getTypesCount() {
    return this.getChildCount(Relationship.TYPE);
  }

  public Iterator<RelationshipType> types() {
    return this.children(RelationshipType.class, Relationship.TYPE);
  }

  public List<RelationshipType> getTypes() {
    return this.getChildren(RelationshipType.class, Relationship.TYPE);
  }

  public void addType(RelationshipType node) {
    this.addChild(Relationship.TYPE, node);
  }

  public void insertType(RelationshipType prev, RelationshipType node) {
    this.insertChild(prev, Relationship.TYPE, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Relationship.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Relationship.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Relationship.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Relationship.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Relationship.SMODEL_ATTRIBUTE, node);
  }

  public int getPropertiesCount() {
    return this.getChildCount(Relationship.PROPERTY);
  }

  public Iterator<Property> properties() {
    return this.children(Property.class, Relationship.PROPERTY);
  }

  public List<Property> getProperties() {
    return this.getChildren(Property.class, Relationship.PROPERTY);
  }

  public void addProperty(Property node) {
    this.addChild(Relationship.PROPERTY, node);
  }

  public void insertProperty(Property prev, Property node) {
    this.insertChild(prev, Relationship.PROPERTY, node);
  }

  public static Relationship newInstance(SModel sm, boolean init) {
    return (Relationship) SModelUtil_new.instantiateConceptDeclaration("neo4j.cypher.structure.Relationship", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Relationship newInstance(SModel sm) {
    return Relationship.newInstance(sm, false);
  }
}
