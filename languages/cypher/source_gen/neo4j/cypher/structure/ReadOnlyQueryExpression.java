package neo4j.cypher.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ReadOnlyQueryExpression extends QueryExpression {
  public static final String concept = "neo4j.cypher.structure.ReadOnlyQueryExpression";
  public static final String START_STATEMENT = "startStatement";
  public static final String MATCH_STATEMENT = "matchStatement";
  public static final String WHERE_STATEMENT = "whereStatement";
  public static final String RETURN_STATEMENT_BLOCK = "returnStatementBlock";

  public ReadOnlyQueryExpression(SNode node) {
    super(node);
  }

  public StartStatement getStartStatement() {
    return (StartStatement) this.getChild(StartStatement.class, ReadOnlyQueryExpression.START_STATEMENT);
  }

  public void setStartStatement(StartStatement node) {
    super.setChild(ReadOnlyQueryExpression.START_STATEMENT, node);
  }

  public MatchStatement getMatchStatement() {
    return (MatchStatement) this.getChild(MatchStatement.class, ReadOnlyQueryExpression.MATCH_STATEMENT);
  }

  public void setMatchStatement(MatchStatement node) {
    super.setChild(ReadOnlyQueryExpression.MATCH_STATEMENT, node);
  }

  public WhereStatement getWhereStatement() {
    return (WhereStatement) this.getChild(WhereStatement.class, ReadOnlyQueryExpression.WHERE_STATEMENT);
  }

  public void setWhereStatement(WhereStatement node) {
    super.setChild(ReadOnlyQueryExpression.WHERE_STATEMENT, node);
  }

  public ReturnStatementBlock getReturnStatementBlock() {
    return (ReturnStatementBlock) this.getChild(ReturnStatementBlock.class, ReadOnlyQueryExpression.RETURN_STATEMENT_BLOCK);
  }

  public void setReturnStatementBlock(ReturnStatementBlock node) {
    super.setChild(ReadOnlyQueryExpression.RETURN_STATEMENT_BLOCK, node);
  }

  public static ReadOnlyQueryExpression newInstance(SModel sm, boolean init) {
    return (ReadOnlyQueryExpression) SModelUtil_new.instantiateConceptDeclaration("neo4j.cypher.structure.ReadOnlyQueryExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ReadOnlyQueryExpression newInstance(SModel sm) {
    return ReadOnlyQueryExpression.newInstance(sm, false);
  }
}
