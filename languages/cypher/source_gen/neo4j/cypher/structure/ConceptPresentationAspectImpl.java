package neo4j.cypher.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbsMathFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AggregateFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AllExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AllIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AllPredicateFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AllShortestPaths = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnyPredicateFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApStringLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AscOrderBy = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AvgAggregate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CoalesceScalarFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CollectAggregate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Collection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CollectionFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConnectionSheet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConnectionStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CountAggregate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherAndExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherCollectionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherDotExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherEqualsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherIntegerConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherMinusExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherMulExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherNodeType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherNotEqualsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherNotExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherOrExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherPathType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherPlusExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherPropertyContainerType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherQueryExecuteMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherQueryStringType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherQueryTupleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherRelationshipType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherRemExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherResultIteratorHasNextMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherResultIteratorMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherResultIteratorNextMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherResultIteratorTupleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherResultRowTupleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherResultTupleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CypherStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeleteExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeleteStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DescOrderBy = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DistinctExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmbeddedConnection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyConnectionStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtractCollFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FilterCollFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Function = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HeadScalarFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICollectionExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IConnectionStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICreateExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICypherExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICypherOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDeleteExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IInnerMatchExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMatchExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_INamedIdentifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_INamedNullableIdentifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOrderByExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOrderedExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IPropertyContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IQuerySheetStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IReturnExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISetExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IWhereExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IWrite = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IWriteStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IdIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IdScalarFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImpermanentConnection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Index = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndexedCypherResultRowMemberAccessExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeyValueNodeIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeyValueRelationshipIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LRRelationship = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LTrimMStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LabelsCollFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LastScalarFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LeftMStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LengthScalarFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LimitStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LowerMStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LuceneIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MaxAggregate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MinAggregate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModifyStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedNodeRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedPathRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedPropertyContainerRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedRelationshipRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Neo4jExec = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodesCollFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NonePredicateFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrderByExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrderByStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PathExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PathFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PercentileAggregateFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PercentileContAggregate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PercentileDiscAggregate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PredicateExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PredicateFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Property = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryEmptyStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuerySheet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryStringExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryStringStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryStringStatmentUntyped = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryStringVisualisationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryTupleExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryTupleStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RLRelationship = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RTrimMStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RangeCollFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReadOnlyQueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReadOnlyQueryStringExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReadOnlyQueryTupleExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReadWriteQueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReadWriteQueryStringExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReadWriteQueryTupleExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReduceCollFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Relationship = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelationshipType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelationshipsCollFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReplaceMStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReturnStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReturnStatementBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RightMStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RoundMathFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScalarFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SetAssignmentStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SetStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShortestPathFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SignMathFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SinglePredicateFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SkipStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SqrtMathFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StartAssignmentStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StartStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StrStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstringMStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SumAggregate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TailCollFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TimestampScalarFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrimMStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeScalarFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UndirectedRelationship = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpperMStringFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WhereStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WithStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WriteOnlyQueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WriteOnlyQueryStringExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WriteOnlyQueryTupleExpression = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbsMathFunction;
      case 1:
        return props_AggregateFunction;
      case 2:
        return props_AllExpression;
      case 3:
        return props_AllIndex;
      case 4:
        return props_AllPredicateFunction;
      case 5:
        return props_AllShortestPaths;
      case 6:
        return props_AnyPredicateFunction;
      case 7:
        return props_ApStringLiteral;
      case 8:
        return props_AsExpression;
      case 9:
        return props_AscOrderBy;
      case 10:
        return props_AvgAggregate;
      case 11:
        return props_CoalesceScalarFunction;
      case 12:
        return props_CollectAggregate;
      case 13:
        return props_Collection;
      case 14:
        return props_CollectionFunction;
      case 15:
        return props_ConnectionSheet;
      case 16:
        return props_ConnectionStatement;
      case 17:
        return props_CountAggregate;
      case 18:
        return props_CreateStatement;
      case 19:
        return props_CypherAndExpression;
      case 20:
        return props_CypherCollectionType;
      case 21:
        return props_CypherDotExpression;
      case 22:
        return props_CypherEqualsExpression;
      case 23:
        return props_CypherIntegerConstant;
      case 24:
        return props_CypherMinusExpression;
      case 25:
        return props_CypherMulExpression;
      case 26:
        return props_CypherNodeType;
      case 27:
        return props_CypherNotEqualsExpression;
      case 28:
        return props_CypherNotExpression;
      case 29:
        return props_CypherOrExpression;
      case 30:
        return props_CypherPathType;
      case 31:
        return props_CypherPlusExpression;
      case 32:
        return props_CypherPropertyContainerType;
      case 33:
        return props_CypherQueryExecuteMethod;
      case 34:
        return props_CypherQueryStringType;
      case 35:
        return props_CypherQueryTupleType;
      case 36:
        return props_CypherRelationshipType;
      case 37:
        return props_CypherRemExpression;
      case 38:
        return props_CypherResultIteratorHasNextMethod;
      case 39:
        return props_CypherResultIteratorMethod;
      case 40:
        return props_CypherResultIteratorNextMethod;
      case 41:
        return props_CypherResultIteratorTupleType;
      case 42:
        return props_CypherResultRowTupleType;
      case 43:
        return props_CypherResultTupleType;
      case 44:
        return props_CypherStatement;
      case 45:
        return props_DeleteExpression;
      case 46:
        return props_DeleteStatement;
      case 47:
        return props_DescOrderBy;
      case 48:
        return props_DistinctExpression;
      case 49:
        return props_EmbeddedConnection;
      case 50:
        return props_EmptyConnectionStatement;
      case 51:
        return props_EmptyNode;
      case 52:
        return props_ExtractCollFunction;
      case 53:
        return props_FilterCollFunction;
      case 54:
        return props_Function;
      case 55:
        return props_HeadScalarFunction;
      case 56:
        return props_ICollectionExpression;
      case 57:
        return props_IConnectionStatement;
      case 58:
        return props_ICreateExpression;
      case 59:
        return props_ICypherExpression;
      case 60:
        return props_ICypherOperation;
      case 61:
        return props_IDeleteExpression;
      case 62:
        return props_IInnerMatchExpression;
      case 63:
        return props_IMatchExpression;
      case 64:
        return props_INamedIdentifier;
      case 65:
        return props_INamedNullableIdentifier;
      case 66:
        return props_IOrderByExpression;
      case 67:
        return props_IOrderedExpression;
      case 68:
        return props_IPropertyContainer;
      case 69:
        return props_IQuerySheetStatement;
      case 70:
        return props_IReturnExpression;
      case 71:
        return props_ISetExpression;
      case 72:
        return props_IWhereExpression;
      case 73:
        return props_IWrite;
      case 74:
        return props_IWriteStatement;
      case 75:
        return props_IdIndex;
      case 76:
        return props_IdScalarFunction;
      case 77:
        return props_ImpermanentConnection;
      case 78:
        return props_Index;
      case 79:
        return props_IndexedCypherResultRowMemberAccessExpression;
      case 80:
        return props_KeyValueNodeIndex;
      case 81:
        return props_KeyValueRelationshipIndex;
      case 82:
        return props_LRRelationship;
      case 83:
        return props_LTrimMStringFunction;
      case 84:
        return props_LabelsCollFunction;
      case 85:
        return props_LastScalarFunction;
      case 86:
        return props_LeftMStringFunction;
      case 87:
        return props_LengthScalarFunction;
      case 88:
        return props_LimitStatement;
      case 89:
        return props_LowerMStringFunction;
      case 90:
        return props_LuceneIndex;
      case 91:
        return props_MatchStatement;
      case 92:
        return props_MathFunction;
      case 93:
        return props_MaxAggregate;
      case 94:
        return props_MinAggregate;
      case 95:
        return props_ModifyStringFunction;
      case 96:
        return props_NamedIndex;
      case 97:
        return props_NamedNodeRef;
      case 98:
        return props_NamedPathRef;
      case 99:
        return props_NamedPropertyContainerRef;
      case 100:
        return props_NamedRelationshipRef;
      case 101:
        return props_Neo4jExec;
      case 102:
        return props_Node;
      case 103:
        return props_NodeType;
      case 104:
        return props_NodesCollFunction;
      case 105:
        return props_NonePredicateFunction;
      case 106:
        return props_OrderByExpression;
      case 107:
        return props_OrderByStatement;
      case 108:
        return props_Parameter;
      case 109:
        return props_PathExpression;
      case 110:
        return props_PathFunction;
      case 111:
        return props_PercentileAggregateFunction;
      case 112:
        return props_PercentileContAggregate;
      case 113:
        return props_PercentileDiscAggregate;
      case 114:
        return props_PredicateExpression;
      case 115:
        return props_PredicateFunction;
      case 116:
        return props_Property;
      case 117:
        return props_PropertyContainer;
      case 118:
        return props_PropertyOperation;
      case 119:
        return props_QueryEmptyStatement;
      case 120:
        return props_QueryExpression;
      case 121:
        return props_QuerySheet;
      case 122:
        return props_QueryStringExpression;
      case 123:
        return props_QueryStringStatement;
      case 124:
        return props_QueryStringStatmentUntyped;
      case 125:
        return props_QueryStringVisualisationStatement;
      case 126:
        return props_QueryTupleExpression;
      case 127:
        return props_QueryTupleStatement;
      case 128:
        return props_RLRelationship;
      case 129:
        return props_RTrimMStringFunction;
      case 130:
        return props_RangeCollFunction;
      case 131:
        return props_ReadOnlyQueryExpression;
      case 132:
        return props_ReadOnlyQueryStringExpression;
      case 133:
        return props_ReadOnlyQueryTupleExpression;
      case 134:
        return props_ReadWriteQueryExpression;
      case 135:
        return props_ReadWriteQueryStringExpression;
      case 136:
        return props_ReadWriteQueryTupleExpression;
      case 137:
        return props_ReduceCollFunction;
      case 138:
        return props_Relationship;
      case 139:
        return props_RelationshipType;
      case 140:
        return props_RelationshipsCollFunction;
      case 141:
        return props_ReplaceMStringFunction;
      case 142:
        return props_ReturnStatement;
      case 143:
        return props_ReturnStatementBlock;
      case 144:
        return props_RightMStringFunction;
      case 145:
        return props_RoundMathFunction;
      case 146:
        return props_ScalarFunction;
      case 147:
        return props_SetAssignmentStatement;
      case 148:
        return props_SetStatement;
      case 149:
        return props_ShortestPathFunction;
      case 150:
        return props_SignMathFunction;
      case 151:
        return props_SinglePredicateFunction;
      case 152:
        return props_SkipStatement;
      case 153:
        return props_SqrtMathFunction;
      case 154:
        return props_StartAssignmentStatement;
      case 155:
        return props_StartStatement;
      case 156:
        return props_StrStringFunction;
      case 157:
        return props_StringFunction;
      case 158:
        return props_SubstringMStringFunction;
      case 159:
        return props_SumAggregate;
      case 160:
        return props_TailCollFunction;
      case 161:
        return props_TimestampScalarFunction;
      case 162:
        return props_TrimMStringFunction;
      case 163:
        return props_TypeScalarFunction;
      case 164:
        return props_UndirectedRelationship;
      case 165:
        return props_UpperMStringFunction;
      case 166:
        return props_WhereStatement;
      case 167:
        return props_WithStatement;
      case 168:
        return props_WriteOnlyQueryExpression;
      case 169:
        return props_WriteOnlyQueryStringExpression;
      case 170:
        return props_WriteOnlyQueryTupleExpression;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
