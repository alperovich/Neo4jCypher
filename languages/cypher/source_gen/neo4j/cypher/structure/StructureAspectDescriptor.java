package neo4j.cypher.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.CompiledConceptDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"neo4j.cypher.structure.AllIndex", "neo4j.cypher.structure.AssignmentStatement", "neo4j.cypher.structure.IQueryStatement", "neo4j.cypher.structure.IdIndex", "neo4j.cypher.structure.Index", "neo4j.cypher.structure.KeyValueIndex", "neo4j.cypher.structure.LuceneIndex", "neo4j.cypher.structure.NamedIndex", "neo4j.cypher.structure.Node", "neo4j.cypher.structure.QueryEmptyStatement", "neo4j.cypher.structure.QueryExpression", "neo4j.cypher.structure.QuerySheet", "neo4j.cypher.structure.QueryStatement", "neo4j.cypher.structure.ReadOnlyQueryExpression", "neo4j.cypher.structure.ReadWriteQueryExpression"};

  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.AllIndex", "neo4j.cypher.structure.Index", false, new String[]{"neo4j.cypher.structure.Index"}, new String[]{}, new String[]{});
      case 1:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.AssignmentStatement", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 2:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.IQueryStatement", null, true, new String[]{}, new String[]{}, new String[]{});
      case 3:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.IdIndex", "neo4j.cypher.structure.Index", false, new String[]{"neo4j.cypher.structure.Index"}, new String[]{}, new String[]{});
      case 4:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.Index", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 5:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.KeyValueIndex", "neo4j.cypher.structure.NamedIndex", false, new String[]{"neo4j.cypher.structure.NamedIndex"}, new String[]{"key", "value"}, new String[]{});
      case 6:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.LuceneIndex", "neo4j.cypher.structure.NamedIndex", false, new String[]{"neo4j.cypher.structure.NamedIndex"}, new String[]{"luceneQuery"}, new String[]{});
      case 7:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.NamedIndex", "neo4j.cypher.structure.Index", false, new String[]{"neo4j.cypher.structure.Index", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 8:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.Node", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 9:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.QueryEmptyStatement", "jetbrains.mps.baseLanguage.structure.Statement", false, new String[]{"jetbrains.mps.baseLanguage.structure.Statement", "neo4j.cypher.structure.IQueryStatement"}, new String[]{}, new String[]{});
      case 10:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.QueryExpression", "jetbrains.mps.baseLanguage.structure.Expression", false, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"}, new String[]{}, new String[]{});
      case 11:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.QuerySheet", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 12:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.QueryStatement", "jetbrains.mps.baseLanguage.structure.Statement", false, new String[]{"jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.INamedConcept", "neo4j.cypher.structure.IQueryStatement"}, new String[]{}, new String[]{});
      case 13:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.ReadOnlyQueryExpression", "neo4j.cypher.structure.QueryExpression", false, new String[]{"neo4j.cypher.structure.QueryExpression"}, new String[]{}, new String[]{});
      case 14:
        return new CompiledConceptDescriptor("neo4j.cypher.structure.ReadWriteQueryExpression", "neo4j.cypher.structure.QueryExpression", false, new String[]{"neo4j.cypher.structure.QueryExpression"}, new String[]{}, new String[]{});
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }
}
