package neo4j.cypher.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.AbsMathFunction").super_("neo4j.cypher.structure.MathFunction").parents("neo4j.cypher.structure.MathFunction").alias("abs", "").create();
      case 1:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.AggregateFunction").super_("neo4j.cypher.structure.Function").parents("neo4j.cypher.structure.Function").children(new String[]{"expression"}, new boolean[]{false}).abstract_().create();
      case 2:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.AllExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IReturnExpression").alias("*", "All expression for aggregate functions").create();
      case 3:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.AllIndex").super_("neo4j.cypher.structure.Index").parents("neo4j.cypher.structure.Index").alias("allindex", "").create();
      case 4:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.AllPredicateFunction").super_("neo4j.cypher.structure.PredicateFunction").parents("neo4j.cypher.structure.PredicateFunction").alias("all", "").create();
      case 5:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.AllShortestPaths").super_("neo4j.cypher.structure.PathFunction").parents("neo4j.cypher.structure.PathFunction").alias("allShortestPaths", "").create();
      case 6:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.AnyPredicateFunction").super_("neo4j.cypher.structure.PredicateFunction").parents("neo4j.cypher.structure.PredicateFunction").alias("any", "").create();
      case 7:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ApStringLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression").properties("value").alias("'", "").create();
      case 8:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.AsExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IReturnExpression", "neo4j.cypher.structure.INamedIdentifier").children(new String[]{"expression"}, new boolean[]{false}).alias("as", "").create();
      case 9:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.AscOrderBy").super_("neo4j.cypher.structure.OrderByExpression").parents("neo4j.cypher.structure.OrderByExpression").alias("asc", "").create();
      case 10:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.AvgAggregate").super_("neo4j.cypher.structure.AggregateFunction").parents("neo4j.cypher.structure.AggregateFunction").alias("agv", "").create();
      case 11:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CoalesceScalarFunction").super_("neo4j.cypher.structure.ScalarFunction").parents("neo4j.cypher.structure.ScalarFunction").children(new String[]{"expressions"}, new boolean[]{true}).alias("coalesce", "Returns the first non-null value in the list of expressions passed to it").create();
      case 12:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CollectAggregate").super_("neo4j.cypher.structure.AggregateFunction").parents("neo4j.cypher.structure.AggregateFunction").alias("collect", "Collection from the values").create();
      case 13:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.Collection").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.IReturnExpression", "neo4j.cypher.structure.ICollectionExpression").children(new String[]{"expression"}, new boolean[]{true}).alias("[", "").create();
      case 14:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CollectionFunction").super_("neo4j.cypher.structure.Function").parents("neo4j.cypher.structure.Function", "neo4j.cypher.structure.ICollectionExpression").abstract_().create();
      case 15:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ConnectionSheet").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"statement"}, new boolean[]{true}).create();
      case 16:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ConnectionStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "neo4j.cypher.structure.IConnectionStatement").properties("active").abstract_().create();
      case 17:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CountAggregate").super_("neo4j.cypher.structure.AggregateFunction").parents("neo4j.cypher.structure.AggregateFunction").alias("count", "").create();
      case 18:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CreateStatement").super_("neo4j.cypher.structure.CypherStatement").parents("neo4j.cypher.structure.CypherStatement", "neo4j.cypher.structure.IWriteStatement").properties("unique").children(new String[]{"pathExpression"}, new boolean[]{true}).alias("create", "").create();
      case 19:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherAndExpression").super_("jetbrains.mps.baseLanguage.structure.AndExpression").parents("jetbrains.mps.baseLanguage.structure.AndExpression", "neo4j.cypher.structure.ICypherOperation", "neo4j.cypher.structure.IWhereExpression", "neo4j.cypher.structure.IReturnExpression").alias("and", "").create();
      case 20:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherCollectionType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("cyphercollection", "cypher collection type").create();
      case 21:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherDotExpression").super_("jetbrains.mps.baseLanguage.structure.DotExpression").parents("jetbrains.mps.baseLanguage.structure.DotExpression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IReturnExpression").create();
      case 22:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.EqualsExpression").parents("jetbrains.mps.baseLanguage.structure.EqualsExpression", "neo4j.cypher.structure.ICypherOperation", "neo4j.cypher.structure.IWhereExpression", "neo4j.cypher.structure.IReturnExpression").alias("=", "").create();
      case 23:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherIntegerConstant").super_("jetbrains.mps.baseLanguage.structure.IntegerLiteral").parents("jetbrains.mps.baseLanguage.structure.IntegerLiteral", "neo4j.cypher.structure.ICypherExpression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("integer constant1", "integer constant").create();
      case 24:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherMinusExpression").super_("jetbrains.mps.baseLanguage.structure.MinusExpression").parents("jetbrains.mps.baseLanguage.structure.MinusExpression", "neo4j.cypher.structure.ICypherOperation").alias("-", "").create();
      case 25:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherMulExpression").super_("jetbrains.mps.baseLanguage.structure.MulExpression").parents("jetbrains.mps.baseLanguage.structure.MulExpression", "neo4j.cypher.structure.ICypherOperation").alias("*", "multiplication operation").create();
      case 26:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherNodeType").super_("neo4j.cypher.structure.CypherPropertyContainerType").parents("neo4j.cypher.structure.CypherPropertyContainerType").alias("cyphernode", "").create();
      case 27:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherNotEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.NotEqualsExpression").parents("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", "neo4j.cypher.structure.ICypherOperation", "neo4j.cypher.structure.IWhereExpression", "neo4j.cypher.structure.IReturnExpression").alias("<>", "").create();
      case 28:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherNotExpression").super_("jetbrains.mps.baseLanguage.structure.NotExpression").parents("jetbrains.mps.baseLanguage.structure.NotExpression", "neo4j.cypher.structure.ICypherOperation", "neo4j.cypher.structure.IWhereExpression", "neo4j.cypher.structure.IReturnExpression").alias("not", "").create();
      case 29:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherOrExpression").super_("jetbrains.mps.baseLanguage.structure.OrExpression").parents("jetbrains.mps.baseLanguage.structure.OrExpression", "neo4j.cypher.structure.ICypherOperation", "neo4j.cypher.structure.IWhereExpression", "neo4j.cypher.structure.IReturnExpression").alias("or", "").create();
      case 30:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherPathType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("cypherpath", "").create();
      case 31:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherPlusExpression").super_("jetbrains.mps.baseLanguage.structure.PlusExpression").parents("jetbrains.mps.baseLanguage.structure.PlusExpression", "neo4j.cypher.structure.ICypherOperation").alias("+", "").create();
      case 32:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherPropertyContainerType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("cypherpropertycontainertype", "").create();
      case 33:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherQueryTupleType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"tupleType"}, new boolean[]{false}).alias("cypherQueryTupleType", "").create();
      case 34:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherRelationshipType").super_("neo4j.cypher.structure.CypherPropertyContainerType").parents("neo4j.cypher.structure.CypherPropertyContainerType").alias("cypherrelationship", "").create();
      case 35:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherRemExpression").super_("jetbrains.mps.baseLanguage.structure.RemExpression").parents("jetbrains.mps.baseLanguage.structure.RemExpression", "neo4j.cypher.structure.ICypherOperation").alias("%", "remainder operation").create();
      case 36:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherResultTupleType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"tupleType"}, new boolean[]{false}).alias("cypherResultTupleType", "").create();
      case 37:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.CypherStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 38:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.DeleteExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("neo4j.cypher.structure.IDeleteExpression", "neo4j.cypher.structure.IOrderedExpression", "jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression"}, new boolean[]{false}).create();
      case 39:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.DeleteStatement").super_("neo4j.cypher.structure.CypherStatement").parents("neo4j.cypher.structure.CypherStatement", "neo4j.cypher.structure.IWriteStatement").children(new String[]{"expression"}, new boolean[]{true}).alias("delete", "").create();
      case 40:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.DescOrderBy").super_("neo4j.cypher.structure.OrderByExpression").parents("neo4j.cypher.structure.OrderByExpression").alias("desc", "").create();
      case 41:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.DistinctExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IReturnExpression").children(new String[]{"expression"}, new boolean[]{false}).alias("distinct", "").create();
      case 42:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.EmbeddedConnection").super_("neo4j.cypher.structure.ConnectionStatement").parents("neo4j.cypher.structure.ConnectionStatement").create();
      case 43:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.EmptyConnectionStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "neo4j.cypher.structure.IConnectionStatement").create();
      case 44:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.EmptyNode").super_("neo4j.cypher.structure.Node").parents("neo4j.cypher.structure.Node").alias("()", "").create();
      case 45:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ExtractCollFunction").super_("neo4j.cypher.structure.CollectionFunction").parents("neo4j.cypher.structure.CollectionFunction").children(new String[]{"expression"}, new boolean[]{false}).alias("extract", "").create();
      case 46:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.FilterCollFunction").super_("neo4j.cypher.structure.CollectionFunction").parents("neo4j.cypher.structure.CollectionFunction").create();
      case 47:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.Function").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IReturnExpression").abstract_().create();
      case 48:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.HeadScalarFunction").super_("neo4j.cypher.structure.ScalarFunction").parents("neo4j.cypher.structure.ScalarFunction").children(new String[]{"expression"}, new boolean[]{false}).alias("head", "").create();
      case 49:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ICollectionExpression").interface_().create();
      case 50:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IConnectionStatement").interface_().create();
      case 51:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ICreateExpression").interface_().create();
      case 52:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ICypherExpression").interface_().create();
      case 53:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ICypherOperation").interface_().parents("neo4j.cypher.structure.ICypherExpression").create();
      case 54:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IDeleteExpression").interface_().create();
      case 55:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IInnerMatchExpression").interface_().parents("neo4j.cypher.structure.ICypherExpression").create();
      case 56:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IMatchExpression").interface_().create();
      case 57:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.INamedIdentifier").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
      case 58:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.INamedNullableIdentifier").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
      case 59:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IOrderByExpression").interface_().create();
      case 60:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IOrderedExpression").interface_().create();
      case 61:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IPropertyContainer").interface_().parents("neo4j.cypher.structure.INamedIdentifier").properties("inDefinitionMode").children(new String[]{"property"}, new boolean[]{true}).create();
      case 62:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IQuerySheetStatement").interface_().create();
      case 63:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IReturnExpression").interface_().create();
      case 64:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ISetExpression").interface_().create();
      case 65:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IWhereExpression").interface_().create();
      case 66:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IWrite").interface_().create();
      case 67:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IWriteStatement").interface_().create();
      case 68:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IdIndex").super_("neo4j.cypher.structure.Index").parents("neo4j.cypher.structure.Index").children(new String[]{"id"}, new boolean[]{true}).alias("idindex", "").create();
      case 69:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.IdScalarFunction").super_("neo4j.cypher.structure.ScalarFunction").parents("neo4j.cypher.structure.ScalarFunction").children(new String[]{"propertyContainerRef"}, new boolean[]{false}).alias("id", "").create();
      case 70:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ImpermanentConnection").super_("neo4j.cypher.structure.ConnectionStatement").parents("neo4j.cypher.structure.ConnectionStatement").properties("memorySize").create();
      case 71:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.Index").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 72:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.KeyValueNodeIndex").super_("neo4j.cypher.structure.NamedIndex").parents("neo4j.cypher.structure.NamedIndex").properties("key").children(new String[]{"value"}, new boolean[]{false}).alias("nodeindex", "").create();
      case 73:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.KeyValueRelationshipIndex").super_("neo4j.cypher.structure.NamedIndex").parents("neo4j.cypher.structure.NamedIndex").properties("key").children(new String[]{"value"}, new boolean[]{false}).alias("relationshipindex", "").create();
      case 74:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.LRRelationship").super_("neo4j.cypher.structure.Relationship").parents("neo4j.cypher.structure.Relationship").alias("->", "").create();
      case 75:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.LTrimMStringFunction").super_("neo4j.cypher.structure.ModifyStringFunction").parents("neo4j.cypher.structure.ModifyStringFunction").alias("ltrim", "returns the original string with whitespace removed from the left side").create();
      case 76:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.LabelsCollFunction").super_("neo4j.cypher.structure.CollectionFunction").parents("neo4j.cypher.structure.CollectionFunction").alias("labels", "").create();
      case 77:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.LastScalarFunction").super_("neo4j.cypher.structure.ScalarFunction").parents("neo4j.cypher.structure.ScalarFunction").children(new String[]{"expression"}, new boolean[]{false}).alias("last", "").create();
      case 78:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.LeftMStringFunction").super_("neo4j.cypher.structure.ModifyStringFunction").parents("neo4j.cypher.structure.ModifyStringFunction").children(new String[]{"length"}, new boolean[]{false}).alias("left", "returns a string containing the left n characters of the original string").create();
      case 79:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.LengthScalarFunction").super_("neo4j.cypher.structure.ScalarFunction").parents("neo4j.cypher.structure.ScalarFunction").children(new String[]{"expression"}, new boolean[]{false}).alias("length", "").create();
      case 80:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.LowerMStringFunction").super_("neo4j.cypher.structure.ModifyStringFunction").parents("neo4j.cypher.structure.ModifyStringFunction").alias("lower", "returns the original string in lowercase").create();
      case 81:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.LuceneIndex").super_("neo4j.cypher.structure.NamedIndex").parents("neo4j.cypher.structure.NamedIndex").properties("luceneQuery").create();
      case 82:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.MatchStatement").super_("neo4j.cypher.structure.CypherStatement").parents("neo4j.cypher.structure.CypherStatement").children(new String[]{"pathExpression"}, new boolean[]{true}).alias("match", "").create();
      case 83:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.MathFunction").super_("neo4j.cypher.structure.Function").parents("neo4j.cypher.structure.Function").children(new String[]{"expression"}, new boolean[]{false}).abstract_().create();
      case 84:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.MaxAggregate").super_("neo4j.cypher.structure.AggregateFunction").parents("neo4j.cypher.structure.AggregateFunction").alias("max", "").create();
      case 85:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.MinAggregate").super_("neo4j.cypher.structure.AggregateFunction").parents("neo4j.cypher.structure.AggregateFunction").alias("min", "").create();
      case 86:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ModifyStringFunction").super_("neo4j.cypher.structure.StringFunction").parents("neo4j.cypher.structure.StringFunction").children(new String[]{"original"}, new boolean[]{false}).create();
      case 87:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.NamedIndex").super_("neo4j.cypher.structure.Index").parents("neo4j.cypher.structure.Index", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").abstract_().create();
      case 88:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.NamedNodeRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IMatchExpression", "neo4j.cypher.structure.ICreateExpression").references("node1").create();
      case 89:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.NamedPathRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IReturnExpression", "neo4j.cypher.structure.IDeleteExpression").references("pathExpression").create();
      case 90:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.NamedPropertyContainerRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IReturnExpression", "neo4j.cypher.structure.IWhereExpression", "neo4j.cypher.structure.IOrderByExpression", "neo4j.cypher.structure.IDeleteExpression", "neo4j.cypher.structure.ISetExpression").references("propertyContainer").create();
      case 91:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.NamedRelationshipRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression").references("namedRelationship").create();
      case 92:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.Neo4jExec").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"query", "graphDb"}, new boolean[]{false, false}).alias("neo4jexec", "").create();
      case 93:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.Node").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IPropertyContainer", "neo4j.cypher.structure.IMatchExpression", "neo4j.cypher.structure.ICreateExpression").alias("node", "").create();
      case 94:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.NodesCollFunction").super_("neo4j.cypher.structure.CollectionFunction").parents("neo4j.cypher.structure.CollectionFunction").children(new String[]{"namedRelationshipRef"}, new boolean[]{false}).alias("nodes", "Returns all nodes in a path").create();
      case 95:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.NonePredicateFunction").super_("neo4j.cypher.structure.PredicateFunction").parents("neo4j.cypher.structure.PredicateFunction").alias("none", "").create();
      case 96:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.OrderByExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IOrderByExpression").children(new String[]{"expression"}, new boolean[]{false}).abstract_().create();
      case 97:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.OrderByStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expressions"}, new boolean[]{true}).alias("orderby", "").create();
      case 98:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.Parameter").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.INamedIdentifier", "neo4j.cypher.structure.IReturnExpression", "neo4j.cypher.structure.IOrderByExpression").alias("{", "").create();
      case 99:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.PathExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.INamedIdentifier", "neo4j.cypher.structure.IOrderedExpression").properties("named").children(new String[]{"expression"}, new boolean[]{false}).create();
      case 100:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.PathFunction").super_("neo4j.cypher.structure.Function").parents("neo4j.cypher.structure.Function", "neo4j.cypher.structure.IMatchExpression").children(new String[]{"expression"}, new boolean[]{false}).abstract_().create();
      case 101:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.PercentileAggregateFunction").super_("neo4j.cypher.structure.AggregateFunction").parents("neo4j.cypher.structure.AggregateFunction").abstract_().create();
      case 102:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.PercentileContAggregate").super_("neo4j.cypher.structure.AggregateFunction").parents("neo4j.cypher.structure.AggregateFunction").alias("percentile_cont", "Continuous percentile").create();
      case 103:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.PercentileDiscAggregate").super_("neo4j.cypher.structure.AggregateFunction").parents("neo4j.cypher.structure.AggregateFunction").alias("percentile_disc", "Discrete percentile").create();
      case 104:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.PredicateExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.IReturnExpression").children(new String[]{"expression"}, new boolean[]{false}).create();
      case 105:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.PredicateFunction").super_("neo4j.cypher.structure.Function").parents("neo4j.cypher.structure.Function", "neo4j.cypher.structure.INamedIdentifier").children(new String[]{"collectionExpression", "predicateExpression"}, new boolean[]{false, false}).abstract_().create();
      case 106:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.Property").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "neo4j.cypher.structure.INamedNullableIdentifier", "neo4j.cypher.structure.IMatchExpression", "neo4j.cypher.structure.ICreateExpression").children(new String[]{"value"}, new boolean[]{false}).create();
      case 107:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.PropertyContainer").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.INamedIdentifier").children(new String[]{"property"}, new boolean[]{true}).abstract_().create();
      case 108:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.PropertyOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "neo4j.cypher.structure.INamedNullableIdentifier", "jetbrains.mps.baseLanguage.structure.IOperation").create();
      case 109:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.QueryEmptyStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "neo4j.cypher.structure.IQuerySheetStatement").create();
      case 110:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.QueryExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().create();
      case 111:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.QuerySheet").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"statement"}, new boolean[]{true}).create();
      case 112:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.QueryStringExpression").interface_().create();
      case 113:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.QueryTupleExpression").interface_().create();
      case 114:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.QueryTupleStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "neo4j.cypher.structure.IQuerySheetStatement").children(new String[]{"type", "queryExpression"}, new boolean[]{false, false}).alias("query", "").create();
      case 115:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.RLRelationship").super_("neo4j.cypher.structure.Relationship").parents("neo4j.cypher.structure.Relationship").alias("<-", "").create();
      case 116:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.RTrimMStringFunction").super_("neo4j.cypher.structure.ModifyStringFunction").parents("neo4j.cypher.structure.ModifyStringFunction").alias("rtrim", "returns the original string with whitespace removed from the right side").create();
      case 117:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.RangeCollFunction").super_("neo4j.cypher.structure.CollectionFunction").parents("neo4j.cypher.structure.CollectionFunction").children(new String[]{"start", "end", "step"}, new boolean[]{false, false, false}).alias("range", "").create();
      case 118:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ReadOnlyQueryExpression").super_("neo4j.cypher.structure.QueryExpression").parents("neo4j.cypher.structure.QueryExpression").children(new String[]{"startStatement", "matchStatement", "whereStatement", "returnStatementBlock"}, new boolean[]{false, false, false, false}).abstract_().create();
      case 119:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ReadOnlyQueryStringExpression").super_("neo4j.cypher.structure.ReadOnlyQueryExpression").parents("neo4j.cypher.structure.ReadOnlyQueryExpression", "neo4j.cypher.structure.QueryStringExpression").alias("roqs", "").create();
      case 120:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ReadOnlyQueryTupleExpression").super_("neo4j.cypher.structure.ReadOnlyQueryExpression").parents("neo4j.cypher.structure.ReadOnlyQueryExpression", "neo4j.cypher.structure.QueryTupleExpression").alias("roqt", "").create();
      case 121:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ReadWriteQueryExpression").super_("neo4j.cypher.structure.QueryExpression").parents("neo4j.cypher.structure.QueryExpression").children(new String[]{"startStatement", "matchStatement", "whereStatement", "writeStatement", "returnStatementBlock"}, new boolean[]{false, false, false, true, false}).abstract_().alias("rwq", "").create();
      case 122:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ReadWriteQueryStringExpression").super_("neo4j.cypher.structure.ReadWriteQueryExpression").parents("neo4j.cypher.structure.ReadWriteQueryExpression", "neo4j.cypher.structure.QueryStringExpression").alias("rwqs", "").create();
      case 123:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ReadWriteQueryTupleExpression").super_("neo4j.cypher.structure.ReadWriteQueryExpression").parents("neo4j.cypher.structure.ReadWriteQueryExpression", "neo4j.cypher.structure.QueryTupleExpression").alias("rwqt", "").create();
      case 124:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ReduceCollFunction").super_("neo4j.cypher.structure.CollectionFunction").parents("neo4j.cypher.structure.CollectionFunction").create();
      case 125:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.Relationship").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.IPropertyContainer", "neo4j.cypher.structure.IMatchExpression", "neo4j.cypher.structure.ICreateExpression").properties("concrete", "specifyHops", "minHops", "maxHops").children(new String[]{"type"}, new boolean[]{true}).abstract_().create();
      case 126:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.RelationshipType").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "neo4j.cypher.structure.ICypherExpression", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "neo4j.cypher.structure.IMatchExpression", "neo4j.cypher.structure.IInnerMatchExpression").create();
      case 127:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.RelationshipsCollFunction").super_("neo4j.cypher.structure.CollectionFunction").parents("neo4j.cypher.structure.CollectionFunction").children(new String[]{"namedRelationshipRef"}, new boolean[]{false}).alias("relationships", "").create();
      case 128:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ReplaceMStringFunction").super_("neo4j.cypher.structure.ModifyStringFunction").parents("neo4j.cypher.structure.ModifyStringFunction").children(new String[]{"search", "replace"}, new boolean[]{false, false}).alias("replace", "returns a string with the search string replaced by the replace string").create();
      case 129:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ReturnStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"returnExpression"}, new boolean[]{true}).create();
      case 130:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ReturnStatementBlock").super_("neo4j.cypher.structure.CypherStatement").parents("neo4j.cypher.structure.CypherStatement").children(new String[]{"returnStatement", "orderByStatement", "skipStatement"}, new boolean[]{false, false, false}).alias("return", "").create();
      case 131:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.RightMStringFunction").super_("neo4j.cypher.structure.ModifyStringFunction").parents("neo4j.cypher.structure.ModifyStringFunction").children(new String[]{"length"}, new boolean[]{false}).alias("right", "returns a string containing the right n characters of the original string").create();
      case 132:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.RoundMathFunction").super_("neo4j.cypher.structure.MathFunction").parents("neo4j.cypher.structure.MathFunction").alias("round", "").create();
      case 133:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ScalarFunction").super_("neo4j.cypher.structure.Function").parents("neo4j.cypher.structure.Function").create();
      case 134:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.SetAssignmentStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("neo4j.cypher.structure.IOrderedExpression", "jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"leftExpression", "rightExpression"}, new boolean[]{false, false}).create();
      case 135:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.SetStatement").super_("neo4j.cypher.structure.CypherStatement").parents("neo4j.cypher.structure.CypherStatement", "neo4j.cypher.structure.IWriteStatement").children(new String[]{"setAssignmentStatement"}, new boolean[]{true}).alias("set", "").create();
      case 136:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.ShortestPathFunction").super_("neo4j.cypher.structure.PathFunction").parents("neo4j.cypher.structure.PathFunction").alias("shortestPath", "").create();
      case 137:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.SignMathFunction").super_("neo4j.cypher.structure.MathFunction").parents("neo4j.cypher.structure.MathFunction").alias("sign", "").create();
      case 138:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.SinglePredicateFunction").super_("neo4j.cypher.structure.PredicateFunction").parents("neo4j.cypher.structure.PredicateFunction").alias("single", "").create();
      case 139:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.SkipStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"skipItems", "limitItems"}, new boolean[]{false, false}).alias("skip", "").create();
      case 140:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.SqrtMathFunction").super_("neo4j.cypher.structure.MathFunction").parents("neo4j.cypher.structure.MathFunction").alias("sqrt", "").create();
      case 141:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.StartAssignmentStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("neo4j.cypher.structure.IOrderedExpression", "jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"node1", "index"}, new boolean[]{false, false}).create();
      case 142:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.StartStatement").super_("neo4j.cypher.structure.CypherStatement").parents("neo4j.cypher.structure.CypherStatement").children(new String[]{"startStatements"}, new boolean[]{true}).alias("start", "").create();
      case 143:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.StrStringFunction").super_("neo4j.cypher.structure.StringFunction").parents("neo4j.cypher.structure.StringFunction").children(new String[]{"expression"}, new boolean[]{false}).alias("str", "returns a string representation of the expression").create();
      case 144:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.StringFunction").super_("neo4j.cypher.structure.Function").parents("neo4j.cypher.structure.Function").abstract_().create();
      case 145:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.SubstringMStringFunction").super_("neo4j.cypher.structure.ModifyStringFunction").parents("neo4j.cypher.structure.ModifyStringFunction").children(new String[]{"start", "length"}, new boolean[]{false, false}).alias("substring", "returns a substring of the original, with a 0-based index start and length").create();
      case 146:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.SumAggregate").super_("neo4j.cypher.structure.AggregateFunction").parents("neo4j.cypher.structure.AggregateFunction").alias("sum", "").create();
      case 147:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.TailCollFunction").super_("neo4j.cypher.structure.CollectionFunction").parents("neo4j.cypher.structure.CollectionFunction").children(new String[]{"expression"}, new boolean[]{false}).alias("tail", "").create();
      case 148:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.TimestampScalarFunction").super_("neo4j.cypher.structure.ScalarFunction").parents("neo4j.cypher.structure.ScalarFunction").alias("timestamp", "").create();
      case 149:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.TrimMStringFunction").super_("neo4j.cypher.structure.ModifyStringFunction").parents("neo4j.cypher.structure.ModifyStringFunction").alias("trim", "returns the original string with whitespace removed from both sides").create();
      case 150:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.TypeScalarFunction").super_("neo4j.cypher.structure.ScalarFunction").parents("neo4j.cypher.structure.ScalarFunction").children(new String[]{"namedRelationshipRef"}, new boolean[]{false}).alias("type", "").create();
      case 151:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.UndirectedRelationship").super_("neo4j.cypher.structure.Relationship").parents("neo4j.cypher.structure.Relationship").alias("--", "").create();
      case 152:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.UpperMStringFunction").super_("neo4j.cypher.structure.ModifyStringFunction").parents("neo4j.cypher.structure.ModifyStringFunction").alias("upper", "returns the original string in uppercase").create();
      case 153:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.WhereStatement").super_("neo4j.cypher.structure.CypherStatement").parents("neo4j.cypher.structure.CypherStatement").children(new String[]{"expression"}, new boolean[]{false}).alias("where", "").create();
      case 154:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.WithStatement").super_("neo4j.cypher.structure.CypherStatement").parents("neo4j.cypher.structure.CypherStatement").children(new String[]{"withExpression"}, new boolean[]{true}).alias("with", "").create();
      case 155:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.WriteOnlyQueryExpression").super_("neo4j.cypher.structure.QueryExpression").parents("neo4j.cypher.structure.QueryExpression").children(new String[]{"createStatement", "writeStatement"}, new boolean[]{false, true}).abstract_().alias("woq", "").create();
      case 156:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.WriteOnlyQueryStringExpression").super_("neo4j.cypher.structure.WriteOnlyQueryExpression").parents("neo4j.cypher.structure.WriteOnlyQueryExpression", "neo4j.cypher.structure.QueryStringExpression").alias("woqs", "").create();
      case 157:
        return new ConceptDescriptorBuilder("neo4j.cypher.structure.WriteOnlyQueryTupleExpression").super_("neo4j.cypher.structure.WriteOnlyQueryExpression").parents("neo4j.cypher.structure.WriteOnlyQueryExpression", "neo4j.cypher.structure.QueryTupleExpression").alias("woqt", "").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"neo4j.cypher.structure.AbsMathFunction", "neo4j.cypher.structure.AggregateFunction", "neo4j.cypher.structure.AllExpression", "neo4j.cypher.structure.AllIndex", "neo4j.cypher.structure.AllPredicateFunction", "neo4j.cypher.structure.AllShortestPaths", "neo4j.cypher.structure.AnyPredicateFunction", "neo4j.cypher.structure.ApStringLiteral", "neo4j.cypher.structure.AsExpression", "neo4j.cypher.structure.AscOrderBy", "neo4j.cypher.structure.AvgAggregate", "neo4j.cypher.structure.CoalesceScalarFunction", "neo4j.cypher.structure.CollectAggregate", "neo4j.cypher.structure.Collection", "neo4j.cypher.structure.CollectionFunction", "neo4j.cypher.structure.ConnectionSheet", "neo4j.cypher.structure.ConnectionStatement", "neo4j.cypher.structure.CountAggregate", "neo4j.cypher.structure.CreateStatement", "neo4j.cypher.structure.CypherAndExpression", "neo4j.cypher.structure.CypherCollectionType", "neo4j.cypher.structure.CypherDotExpression", "neo4j.cypher.structure.CypherEqualsExpression", "neo4j.cypher.structure.CypherIntegerConstant", "neo4j.cypher.structure.CypherMinusExpression", "neo4j.cypher.structure.CypherMulExpression", "neo4j.cypher.structure.CypherNodeType", "neo4j.cypher.structure.CypherNotEqualsExpression", "neo4j.cypher.structure.CypherNotExpression", "neo4j.cypher.structure.CypherOrExpression", "neo4j.cypher.structure.CypherPathType", "neo4j.cypher.structure.CypherPlusExpression", "neo4j.cypher.structure.CypherPropertyContainerType", "neo4j.cypher.structure.CypherQueryTupleType", "neo4j.cypher.structure.CypherRelationshipType", "neo4j.cypher.structure.CypherRemExpression", "neo4j.cypher.structure.CypherResultTupleType", "neo4j.cypher.structure.CypherStatement", "neo4j.cypher.structure.DeleteExpression", "neo4j.cypher.structure.DeleteStatement", "neo4j.cypher.structure.DescOrderBy", "neo4j.cypher.structure.DistinctExpression", "neo4j.cypher.structure.EmbeddedConnection", "neo4j.cypher.structure.EmptyConnectionStatement", "neo4j.cypher.structure.EmptyNode", "neo4j.cypher.structure.ExtractCollFunction", "neo4j.cypher.structure.FilterCollFunction", "neo4j.cypher.structure.Function", "neo4j.cypher.structure.HeadScalarFunction", "neo4j.cypher.structure.ICollectionExpression", "neo4j.cypher.structure.IConnectionStatement", "neo4j.cypher.structure.ICreateExpression", "neo4j.cypher.structure.ICypherExpression", "neo4j.cypher.structure.ICypherOperation", "neo4j.cypher.structure.IDeleteExpression", "neo4j.cypher.structure.IInnerMatchExpression", "neo4j.cypher.structure.IMatchExpression", "neo4j.cypher.structure.INamedIdentifier", "neo4j.cypher.structure.INamedNullableIdentifier", "neo4j.cypher.structure.IOrderByExpression", "neo4j.cypher.structure.IOrderedExpression", "neo4j.cypher.structure.IPropertyContainer", "neo4j.cypher.structure.IQuerySheetStatement", "neo4j.cypher.structure.IReturnExpression", "neo4j.cypher.structure.ISetExpression", "neo4j.cypher.structure.IWhereExpression", "neo4j.cypher.structure.IWrite", "neo4j.cypher.structure.IWriteStatement", "neo4j.cypher.structure.IdIndex", "neo4j.cypher.structure.IdScalarFunction", "neo4j.cypher.structure.ImpermanentConnection", "neo4j.cypher.structure.Index", "neo4j.cypher.structure.KeyValueNodeIndex", "neo4j.cypher.structure.KeyValueRelationshipIndex", "neo4j.cypher.structure.LRRelationship", "neo4j.cypher.structure.LTrimMStringFunction", "neo4j.cypher.structure.LabelsCollFunction", "neo4j.cypher.structure.LastScalarFunction", "neo4j.cypher.structure.LeftMStringFunction", "neo4j.cypher.structure.LengthScalarFunction", "neo4j.cypher.structure.LowerMStringFunction", "neo4j.cypher.structure.LuceneIndex", "neo4j.cypher.structure.MatchStatement", "neo4j.cypher.structure.MathFunction", "neo4j.cypher.structure.MaxAggregate", "neo4j.cypher.structure.MinAggregate", "neo4j.cypher.structure.ModifyStringFunction", "neo4j.cypher.structure.NamedIndex", "neo4j.cypher.structure.NamedNodeRef", "neo4j.cypher.structure.NamedPathRef", "neo4j.cypher.structure.NamedPropertyContainerRef", "neo4j.cypher.structure.NamedRelationshipRef", "neo4j.cypher.structure.Neo4jExec", "neo4j.cypher.structure.Node", "neo4j.cypher.structure.NodesCollFunction", "neo4j.cypher.structure.NonePredicateFunction", "neo4j.cypher.structure.OrderByExpression", "neo4j.cypher.structure.OrderByStatement", "neo4j.cypher.structure.Parameter", "neo4j.cypher.structure.PathExpression", "neo4j.cypher.structure.PathFunction", "neo4j.cypher.structure.PercentileAggregateFunction", "neo4j.cypher.structure.PercentileContAggregate", "neo4j.cypher.structure.PercentileDiscAggregate", "neo4j.cypher.structure.PredicateExpression", "neo4j.cypher.structure.PredicateFunction", "neo4j.cypher.structure.Property", "neo4j.cypher.structure.PropertyContainer", "neo4j.cypher.structure.PropertyOperation", "neo4j.cypher.structure.QueryEmptyStatement", "neo4j.cypher.structure.QueryExpression", "neo4j.cypher.structure.QuerySheet", "neo4j.cypher.structure.QueryStringExpression", "neo4j.cypher.structure.QueryTupleExpression", "neo4j.cypher.structure.QueryTupleStatement", "neo4j.cypher.structure.RLRelationship", "neo4j.cypher.structure.RTrimMStringFunction", "neo4j.cypher.structure.RangeCollFunction", "neo4j.cypher.structure.ReadOnlyQueryExpression", "neo4j.cypher.structure.ReadOnlyQueryStringExpression", "neo4j.cypher.structure.ReadOnlyQueryTupleExpression", "neo4j.cypher.structure.ReadWriteQueryExpression", "neo4j.cypher.structure.ReadWriteQueryStringExpression", "neo4j.cypher.structure.ReadWriteQueryTupleExpression", "neo4j.cypher.structure.ReduceCollFunction", "neo4j.cypher.structure.Relationship", "neo4j.cypher.structure.RelationshipType", "neo4j.cypher.structure.RelationshipsCollFunction", "neo4j.cypher.structure.ReplaceMStringFunction", "neo4j.cypher.structure.ReturnStatement", "neo4j.cypher.structure.ReturnStatementBlock", "neo4j.cypher.structure.RightMStringFunction", "neo4j.cypher.structure.RoundMathFunction", "neo4j.cypher.structure.ScalarFunction", "neo4j.cypher.structure.SetAssignmentStatement", "neo4j.cypher.structure.SetStatement", "neo4j.cypher.structure.ShortestPathFunction", "neo4j.cypher.structure.SignMathFunction", "neo4j.cypher.structure.SinglePredicateFunction", "neo4j.cypher.structure.SkipStatement", "neo4j.cypher.structure.SqrtMathFunction", "neo4j.cypher.structure.StartAssignmentStatement", "neo4j.cypher.structure.StartStatement", "neo4j.cypher.structure.StrStringFunction", "neo4j.cypher.structure.StringFunction", "neo4j.cypher.structure.SubstringMStringFunction", "neo4j.cypher.structure.SumAggregate", "neo4j.cypher.structure.TailCollFunction", "neo4j.cypher.structure.TimestampScalarFunction", "neo4j.cypher.structure.TrimMStringFunction", "neo4j.cypher.structure.TypeScalarFunction", "neo4j.cypher.structure.UndirectedRelationship", "neo4j.cypher.structure.UpperMStringFunction", "neo4j.cypher.structure.WhereStatement", "neo4j.cypher.structure.WithStatement", "neo4j.cypher.structure.WriteOnlyQueryExpression", "neo4j.cypher.structure.WriteOnlyQueryStringExpression", "neo4j.cypher.structure.WriteOnlyQueryTupleExpression"};
}
