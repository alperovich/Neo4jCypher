package neo4j.cypher.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CoalesceScalarFunction extends ScalarFunction {
  public static final String concept = "neo4j.cypher.structure.CoalesceScalarFunction";
  public static final String EXPRESSIONS = "expressions";

  public CoalesceScalarFunction(SNode node) {
    super(node);
  }

  public int getExpressionsesCount() {
    return this.getChildCount(CoalesceScalarFunction.EXPRESSIONS);
  }

  public Iterator<Expression> expressionses() {
    return this.children(Expression.class, CoalesceScalarFunction.EXPRESSIONS);
  }

  public List<Expression> getExpressionses() {
    return this.getChildren(Expression.class, CoalesceScalarFunction.EXPRESSIONS);
  }

  public void addExpressions(Expression node) {
    this.addChild(CoalesceScalarFunction.EXPRESSIONS, node);
  }

  public void insertExpressions(Expression prev, Expression node) {
    this.insertChild(prev, CoalesceScalarFunction.EXPRESSIONS, node);
  }

  public static CoalesceScalarFunction newInstance(SModel sm, boolean init) {
    return (CoalesceScalarFunction) SModelUtil_new.instantiateConceptDeclaration("neo4j.cypher.structure.CoalesceScalarFunction", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CoalesceScalarFunction newInstance(SModel sm) {
    return CoalesceScalarFunction.newInstance(sm, false);
  }
}
