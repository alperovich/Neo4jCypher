package neo4j.cypher.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import java.util.HashMap;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_t8hmqt_a0c.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return new AggregateFunction_TextGen();
          }
          break;
        case 1:
          if (true) {
            return new AllExpression_TextGen();
          }
          break;
        case 2:
          if (true) {
            return new AllIndex_TextGen();
          }
          break;
        case 3:
          if (true) {
            return new ApStringLiteral_TextGen();
          }
          break;
        case 4:
          if (true) {
            return new AscOrderBy_TextGen();
          }
          break;
        case 5:
          if (true) {
            return new CreateStatement_TextGen();
          }
          break;
        case 6:
          if (true) {
            return new CypherAndExpression_TextGen();
          }
          break;
        case 7:
          if (true) {
            return new CypherEqualsExpression_TextGen();
          }
          break;
        case 8:
          if (true) {
            return new CypherIntegerConstant_TextGen();
          }
          break;
        case 9:
          if (true) {
            return new CypherNotExpression_TextGen();
          }
          break;
        case 10:
          if (true) {
            return new CypherOrExpression_TextGen();
          }
          break;
        case 11:
          if (true) {
            return new CypherQueryExecuteMethod_TextGen();
          }
          break;
        case 12:
          if (true) {
            return new CypherQueryStringType_TextGen();
          }
          break;
        case 13:
          if (true) {
            return new CypherQueryTupleType_TextGen();
          }
          break;
        case 14:
          if (true) {
            return new CypherResultIteratorHasNextMethod_TextGen();
          }
          break;
        case 15:
          if (true) {
            return new CypherResultIteratorMethod_TextGen();
          }
          break;
        case 16:
          if (true) {
            return new CypherResultIteratorNextMethod_TextGen();
          }
          break;
        case 17:
          if (true) {
            return new CypherResultIteratorTupleType_TextGen();
          }
          break;
        case 18:
          if (true) {
            return new CypherResultRowTupleType_TextGen();
          }
          break;
        case 19:
          if (true) {
            return new CypherResultTupleType_TextGen();
          }
          break;
        case 20:
          if (true) {
            return new DeleteExpression_TextGen();
          }
          break;
        case 21:
          if (true) {
            return new DeleteStatement_TextGen();
          }
          break;
        case 22:
          if (true) {
            return new DescOrderBy_TextGen();
          }
          break;
        case 23:
          if (true) {
            return new EmptyNode_TextGen();
          }
          break;
        case 24:
          if (true) {
            return new HeadScalarFunction_TextGen();
          }
          break;
        case 25:
          if (true) {
            return new IdIndex_TextGen();
          }
          break;
        case 26:
          if (true) {
            return new IdScalarFunction_TextGen();
          }
          break;
        case 27:
          if (true) {
            return new IndexedCypherResultRowMemberAccessExpression_TextGen();
          }
          break;
        case 28:
          if (true) {
            return new KeyValueNodeIndex_TextGen();
          }
          break;
        case 29:
          if (true) {
            return new KeyValueRelationshipIndex_TextGen();
          }
          break;
        case 30:
          if (true) {
            return new LRRelationship_TextGen();
          }
          break;
        case 31:
          if (true) {
            return new LastScalarFunction_TextGen();
          }
          break;
        case 32:
          if (true) {
            return new LengthScalarFunction_TextGen();
          }
          break;
        case 33:
          if (true) {
            return new LimitStatement_TextGen();
          }
          break;
        case 34:
          if (true) {
            return new LuceneIndex_TextGen();
          }
          break;
        case 35:
          if (true) {
            return new MatchStatement_TextGen();
          }
          break;
        case 36:
          if (true) {
            return new MathFunction_TextGen();
          }
          break;
        case 37:
          if (true) {
            return new NamedNodeRef_TextGen();
          }
          break;
        case 38:
          if (true) {
            return new NamedPathRef_TextGen();
          }
          break;
        case 39:
          if (true) {
            return new NamedPropertyContainerRef_TextGen();
          }
          break;
        case 40:
          if (true) {
            return new Node_TextGen();
          }
          break;
        case 41:
          if (true) {
            return new NodeType_TextGen();
          }
          break;
        case 42:
          if (true) {
            return new OrderByStatement_TextGen();
          }
          break;
        case 43:
          if (true) {
            return new PathExpression_TextGen();
          }
          break;
        case 44:
          if (true) {
            return new PathFunction_TextGen();
          }
          break;
        case 45:
          if (true) {
            return new Property_TextGen();
          }
          break;
        case 46:
          if (true) {
            return new PropertyOperation_TextGen();
          }
          break;
        case 47:
          if (true) {
            return new QueryEmptyStatement_TextGen();
          }
          break;
        case 48:
          if (true) {
            return new QuerySheet_TextGen();
          }
          break;
        case 49:
          if (true) {
            return new QueryStringStatement_TextGen();
          }
          break;
        case 50:
          if (true) {
            return new QueryTupleStatement_TextGen();
          }
          break;
        case 51:
          if (true) {
            return new RLRelationship_TextGen();
          }
          break;
        case 52:
          if (true) {
            return new ReadOnlyQueryExpression_TextGen();
          }
          break;
        case 53:
          if (true) {
            return new ReadWriteQueryExpression_TextGen();
          }
          break;
        case 54:
          if (true) {
            return new RelationshipType_TextGen();
          }
          break;
        case 55:
          if (true) {
            return new ReturnStatement_TextGen();
          }
          break;
        case 56:
          if (true) {
            return new ReturnStatementBlock_TextGen();
          }
          break;
        case 57:
          if (true) {
            return new SetAssignmentStatement_TextGen();
          }
          break;
        case 58:
          if (true) {
            return new SetStatement_TextGen();
          }
          break;
        case 59:
          if (true) {
            return new SkipStatement_TextGen();
          }
          break;
        case 60:
          if (true) {
            return new StartAssignmentStatement_TextGen();
          }
          break;
        case 61:
          if (true) {
            return new StartStatement_TextGen();
          }
          break;
        case 62:
          if (true) {
            return new SubstringMStringFunction_TextGen();
          }
          break;
        case 63:
          if (true) {
            return new TimestampScalarFunction_TextGen();
          }
          break;
        case 64:
          if (true) {
            return new UndirectedRelationship_TextGen();
          }
          break;
        case 65:
          if (true) {
            return new WhereStatement_TextGen();
          }
          break;
        case 66:
          if (true) {
            return new WriteOnlyQueryExpression_TextGen();
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303b7d8aeL, "neo4j.cypher.structure.QuerySheet"))) {
        String fname = getFileName_QuerySheet(root);
        String ext = getFileExtension_QuerySheet(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_QuerySheet(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_QuerySheet(SNode node) {
    return "cypherq";
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_t8hmqt_a0c = buildConceptIndices(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcc89daL, "neo4j.cypher.structure.AggregateFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d5662cL, "neo4j.cypher.structure.AllExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bb83bcL, "neo4j.cypher.structure.AllIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042432e2L, "neo4j.cypher.structure.ApStringLiteral"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6607a8a1c5b01e59L, "neo4j.cypher.structure.AscOrderBy"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d600d9L, "neo4j.cypher.structure.CreateStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104307f52L, "neo4j.cypher.structure.CypherAndExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1043068f8L, "neo4j.cypher.structure.CypherEqualsExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa51802cL, "neo4j.cypher.structure.CypherIntegerConstant"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104307f65L, "neo4j.cypher.structure.CypherNotExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104307f56L, "neo4j.cypher.structure.CypherOrExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3340f286fb406a31L, "neo4j.cypher.structure.CypherQueryExecuteMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x36087ce47f5b9b0eL, "neo4j.cypher.structure.CypherQueryStringType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x52178e892162ba1aL, "neo4j.cypher.structure.CypherQueryTupleType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b0458d7eL, "neo4j.cypher.structure.CypherResultIteratorHasNextMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b02c7309L, "neo4j.cypher.structure.CypherResultIteratorMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b0587485L, "neo4j.cypher.structure.CypherResultIteratorNextMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b02ee751L, "neo4j.cypher.structure.CypherResultIteratorTupleType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b0585cf2L, "neo4j.cypher.structure.CypherResultRowTupleType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3340f286fb2bc7faL, "neo4j.cypher.structure.CypherResultTupleType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x7a3bb6c9eea6c006L, "neo4j.cypher.structure.DeleteExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d6010bL, "neo4j.cypher.structure.DeleteStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6607a8a1c5b01e63L, "neo4j.cypher.structure.DescOrderBy"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d300249aaeec6c6L, "neo4j.cypher.structure.EmptyNode"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d3fd21L, "neo4j.cypher.structure.HeadScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bb8384L, "neo4j.cypher.structure.IdIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c133e2L, "neo4j.cypher.structure.IdScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b06a1554L, "neo4j.cypher.structure.IndexedCypherResultRowMemberAccessExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bb837eL, "neo4j.cypher.structure.KeyValueNodeIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da99930L, "neo4j.cypher.structure.KeyValueRelationshipIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcc2439L, "neo4j.cypher.structure.LRRelationship"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d43f1bL, "neo4j.cypher.structure.LastScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d48762L, "neo4j.cypher.structure.LengthScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4d5ba0408a4bacceL, "neo4j.cypher.structure.LimitStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bb8381L, "neo4j.cypher.structure.LuceneIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24307713L, "neo4j.cypher.structure.MatchStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d43f1eL, "neo4j.cypher.structure.MathFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe2434a1cdL, "neo4j.cypher.structure.NamedNodeRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da6df9bL, "neo4j.cypher.structure.NamedPathRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c16436L, "neo4j.cypher.structure.NamedPropertyContainerRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e11L, "neo4j.cypher.structure.Node"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x30b8c283b3c55a42L, "neo4j.cypher.structure.NodeType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4cbf2dbb00e59362L, "neo4j.cypher.structure.OrderByStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da444f2L, "neo4j.cypher.structure.PathExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da776d7L, "neo4j.cypher.structure.PathFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24361f8bL, "neo4j.cypher.structure.Property"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2bf84db8340e211fL, "neo4j.cypher.structure.PropertyOperation"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bc42f4L, "neo4j.cypher.structure.QueryEmptyStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303b7d8aeL, "neo4j.cypher.structure.QuerySheet"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x36087ce47f4eb88eL, "neo4j.cypher.structure.QueryStringStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303b80605L, "neo4j.cypher.structure.QueryTupleStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcc43a1L, "neo4j.cypher.structure.RLRelationship"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e05L, "neo4j.cypher.structure.ReadOnlyQueryExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, "neo4j.cypher.structure.ReadWriteQueryExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcb3742L, "neo4j.cypher.structure.RelationshipType"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24389e5eL, "neo4j.cypher.structure.ReturnStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2959fa271e1707a3L, "neo4j.cypher.structure.ReturnStatementBlock"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0xaaeb60067637537L, "neo4j.cypher.structure.SetAssignmentStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d600edL, "neo4j.cypher.structure.SetStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2959fa271e1657eaL, "neo4j.cypher.structure.SkipStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e10L, "neo4j.cypher.structure.StartAssignmentStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe2438aca4L, "neo4j.cypher.structure.StartStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4df204L, "neo4j.cypher.structure.SubstringMStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d300249aae5f5ffL, "neo4j.cypher.structure.TimestampScalarFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcc64edL, "neo4j.cypher.structure.UndirectedRelationship"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24307714L, "neo4j.cypher.structure.WhereStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa5L, "neo4j.cypher.structure.WriteOnlyQueryExpression"));
}
