package neo4j.cypher.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_INamedPropertyContainerUniqueness_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_INamedPropertyContainerUniqueness_NonTypesystemRule() {
  }

  public void applyRule(final SNode namedIdentifier, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // <node> 

    List<SNode> allTheSameIdentifiers = SNodeOperations.getDescendants(SNodeOperations.getAncestor(namedIdentifier, "neo4j.cypher.structure.QueryExpression", false, false), "neo4j.cypher.structure.INamedIdentifier", false, new String[]{});

    for (SNode identif : allTheSameIdentifiers) {
      if (identif == namedIdentifier) {
        break;
      } else {
        if (SPropertyOperations.getString(identif, "name").equals(SPropertyOperations.getString(namedIdentifier, "name"))) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(namedIdentifier, "Identifier name " + SPropertyOperations.getString(namedIdentifier, "name") + " is already used", "r:1549d4d9-195d-4192-a8ca-9bdca0139ffa(neo4j.cypher.typesystem)", "6670155983237862061", null, errorTarget);
          }
          break;
        }
      }

    }
  }

  public String getApplicableConceptFQName() {
    return "neo4j.cypher.structure.INamedIdentifier";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
