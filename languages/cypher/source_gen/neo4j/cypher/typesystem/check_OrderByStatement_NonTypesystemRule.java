package neo4j.cypher.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_OrderByStatement_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_OrderByStatement_NonTypesystemRule() {
  }

  public void applyRule(final SNode orderByStatement, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {

    ListSequence.fromList(SLinkOperations.getTargets(orderByStatement, "expressions", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNode orderByExpression = it;

        if (SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(it), "neo4j.cypher.structure.OrderByExpression")) {
          orderByExpression = SLinkOperations.getTarget(SNodeOperations.cast(it, "neo4j.cypher.structure.OrderByExpression"), "expression", true);
        }

        if (!(SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(orderByExpression), "jetbrains.mps.baseLanguage.structure.DotExpression"))) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(orderByExpression, "Order by clause can be used only on properties", "r:1549d4d9-195d-4192-a8ca-9bdca0139ffa(neo4j.cypher.typesystem)", "6746204763277529677", null, errorTarget);
          }

        }
      }
    });

  }

  public String getApplicableConceptFQName() {
    return "neo4j.cypher.structure.OrderByStatement";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
