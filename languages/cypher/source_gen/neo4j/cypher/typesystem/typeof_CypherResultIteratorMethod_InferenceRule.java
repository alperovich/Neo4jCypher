package neo4j.cypher.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.project.GlobalScope;
import java.util.List;

public class typeof_CypherResultIteratorMethod_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_CypherResultIteratorMethod_InferenceRule() {
  }

  public void applyRule(final SNode cypherResultIteratorMethod, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final SNode operand = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(cypherResultIteratorMethod), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true);

    {
      final SNode queryType = typeCheckingContext.typeOf(operand, "r:1549d4d9-195d-4192-a8ca-9bdca0139ffa(neo4j.cypher.typesystem)", "1942295127442522974", true);
      typeCheckingContext.whenConcrete(queryType, new Runnable() {
        public void run() {
          SNode type = TypeChecker.getInstance().getRuntimeSupport().coerce_(typeCheckingContext.getExpandedNode(queryType), HUtil.createMatchingPatternByConceptFQName("neo4j.cypher.structure.CypherResultTupleType"), true);
          {
            SNode _nodeToCheck_1029348928467 = cypherResultIteratorMethod;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:1549d4d9-195d-4192-a8ca-9bdca0139ffa(neo4j.cypher.typesystem)", "1942295127442522957", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:1549d4d9-195d-4192-a8ca-9bdca0139ffa(neo4j.cypher.typesystem)", "1942295127442522959", true), (SNode) _quotation_createNode_2vrcg5_a0b0c0b(SLinkOperations.getTargets(SLinkOperations.getTarget(type, "tupleType", true), "componentType", true)), _info_12389875345);
          }
        }
      }, "r:1549d4d9-195d-4192-a8ca-9bdca0139ffa(neo4j.cypher.typesystem)", "1942295127442522949", false, false);
    }
  }

  public String getApplicableConceptFQName() {
    return "neo4j.cypher.structure.CypherResultIteratorMethod";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static SNode _quotation_createNode_2vrcg5_a0b0c0b(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("neo4j.cypher.structure.CypherResultIteratorTupleType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleType", null, null, GlobalScope.getInstance(), false);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_3.addChild("componentType", HUtil.copyIfNecessary(child));
      }
    }
    quotedNode_2.addChild("tupleType", quotedNode_3);
    return quotedNode_2;
  }
}
