package neo4j.cypher.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import neo4j.cypher.behavior.QueryTupleExpression__BehaviorDescriptor;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class typeof_QueryTupleExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_QueryTupleExpression_InferenceRule() {
  }
  protected static Logger LOG = LogManager.getLogger(typeof_QueryTupleExpression_InferenceRule.class);
  public void applyRule(final SNode queryTupleExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode returnStatement = QueryTupleExpression__BehaviorDescriptor.getReturnStatement_id58nzC$xy$Nc.invoke(queryTupleExpression);

    if (LOG.isInfoEnabled()) {
      LOG.info("typeof querytupleexpression called");
    }

    final List<SNode> memberTypes = ListSequence.fromList(new ArrayList<SNode>());

    ListSequence.fromList(SLinkOperations.getChildren(returnStatement, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24389e5eL, 0x3d018fbe24317aeeL, "returnExpression"))).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode it) {
__skip__:
        do {
          SNode type = typeCheckingContext.typeOf(it, "r:1549d4d9-195d-4192-a8ca-9bdca0139ffa(neo4j.cypher.typesystem)", "3444411749674386034", true);
          if (SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c16436L, "neo4j.cypher.structure.NamedPropertyContainerRef"))) {
            SNode propertyContainer = SLinkOperations.getTarget(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c16436L, "neo4j.cypher.structure.NamedPropertyContainerRef")), MetaAdapterFactory.getReferenceLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c16436L, 0x6de5edabd1c16437L, "propertyContainer"));
            if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(propertyContainer)), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e11L, "neo4j.cypher.structure.Node"))) {
              ListSequence.fromList(memberTypes).addElement(_quotation_createNode_2z3nj2_a0a0a1a1a0a0g0b());
              break __skip__;
            } else if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(propertyContainer)), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x637ffba7f2948fabL, "neo4j.cypher.structure.Relationship"))) {
              ListSequence.fromList(memberTypes).addElement(_quotation_createNode_2z3nj2_a0a0a0b0b0a0a6a1());
              break __skip__;
            }

          } else if (SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da6df9bL, "neo4j.cypher.structure.NamedPathRef"))) {
            ListSequence.fromList(memberTypes).addElement(_quotation_createNode_2z3nj2_a0a0a0b0a0a6a1());
            break __skip__;
          }

          ListSequence.fromList(memberTypes).addElement(type);



        } while (false);
      }
    });

    if (LOG.isInfoEnabled()) {
      LOG.info("types:" + memberTypes);
    }


    {
      SNode _nodeToCheck_1029348928467 = queryTupleExpression;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:1549d4d9-195d-4192-a8ca-9bdca0139ffa(neo4j.cypher.typesystem)", "5915353355195737579", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:1549d4d9-195d-4192-a8ca-9bdca0139ffa(neo4j.cypher.typesystem)", "5915353355195737404", true), (SNode) _quotation_createNode_2z3nj2_a0l0b(memberTypes), _info_12389875345);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x52178e89215b5fe0L, "neo4j.cypher.structure.QueryTupleExpression");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode _quotation_createNode_2z3nj2_a0a0a1a1a0a0g0b() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType"), null, null, false);
    quotedNode_1.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), quotedNode_1, facade.createModelReference("8be426ea-f02f-4221-9d9f-9eb718c2d998/java:org.neo4j.graphdb(neo4j.cypher.runtime/)"), facade.createNodeId("~Node")));
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_2z3nj2_a0a0a0b0b0a0a6a1() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType"), null, null, false);
    quotedNode_1.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), quotedNode_1, facade.createModelReference("8be426ea-f02f-4221-9d9f-9eb718c2d998/java:org.neo4j.graphdb(neo4j.cypher.runtime/)"), facade.createNodeId("~Relationship")));
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_2z3nj2_a0a0a0b0a0a6a1() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType"), null, null, false);
    quotedNode_1.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), quotedNode_1, facade.createModelReference("8be426ea-f02f-4221-9d9f-9eb718c2d998/java:org.neo4j.graphdb(neo4j.cypher.runtime/)"), facade.createNodeId("~Path")));
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_2z3nj2_a0l0b(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x52178e892162ba1aL, "neo4j.cypher.structure.CypherQueryTupleType"), null, null, false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xa247e09e243545baL, 0xb8d207e93feba96aL, 0x1207157a8dcL, "jetbrains.mps.baseLanguage.tuples.structure.IndexedTupleType"), null, null, false);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_3.addChild(MetaAdapterFactory.getContainmentLink(0xa247e09e243545baL, 0xb8d207e93feba96aL, 0x1207157a8dcL, 0x1207158795cL, "componentType"), HUtil.copyIfNecessary(child));
      }
    }
    quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x52178e892162ba1aL, 0x52178e892162ba1dL, "tupleType"), quotedNode_3);
    return quotedNode_2;
  }
}
