package neo4j.cypher.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class SetStatement_Behavior {
  public static void init(SNode thisNode) {
  }

  public static int virtual_getOrder_6384283002380928985(SNode thisNode) {
    return 3;
  }

  public static void virtual_joinWithTheSameNodeType_8020740480872452998(SNode thisNode, SNode otherIWriteStatement) {
    if (LOG.isInfoEnabled()) {
      LOG.info("concept:" + BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getConceptDeclaration(otherIWriteStatement), "virtual_getFqName_1213877404258", new Object[]{}));
    }
    if (BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getConceptDeclaration(otherIWriteStatement), "virtual_getFqName_1213877404258", new Object[]{}).equals(BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getConceptDeclaration(thisNode), "virtual_getFqName_1213877404258", new Object[]{}))) {
      if (LOG.isInfoEnabled()) {
        LOG.info("jointing with concept");
      }
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "setAssignmentStatement", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(otherIWriteStatement, "neo4j.cypher.structure.SetStatement"), "setAssignmentStatement", true)));
    }

  }

  protected static Logger LOG = LogManager.getLogger(SetStatement_Behavior.class);
}
