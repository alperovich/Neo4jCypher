package neo4j.cypher.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.IModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ApStringLiteral_Behavior {
  public static void init(SNode thisNode) {
  }

  public static Object virtual_eval_1213877519769(SNode thisNode, IModule module) {
    return SPropertyOperations.getString(thisNode, "value");
  }

  public static boolean call_isCorrect_1221565233201(SNode thisNode) {
    boolean isEscapeMode = false;
    boolean isUnicodeMode = false;
    boolean isSymbolCodeMode = false;
    int digitNumber = 0;
    int unicodeDigitNumber = 0;
    String value = SPropertyOperations.getString(thisNode, "value");
    if (value == null) {
      return true;
    }
    for (int i = 0; i < value.length(); i++) {
      char c = SPropertyOperations.getString(thisNode, "value").charAt(i);
      if (isEscapeMode) {
        if (c == 'u') {
          isUnicodeMode = true;
        } else if (Character.isDigit(c)) {
          isSymbolCodeMode = true;
          digitNumber = 1;
        } else if (c != 'n' && c != 't' && c != 'b' && c != 'f' && c != 'r' && c != '"' && c != '\'' && c != '\\') {
          return false;
        }
        isEscapeMode = false;
      } else if (c == '\\') {
        isEscapeMode = true;
      } else if (isSymbolCodeMode) {
        if (Character.isDigit(c)) {
          digitNumber++;
        } else {
          return false;
        }
        if (digitNumber == 3) {
          isSymbolCodeMode = false;
          digitNumber = 0;
        }
      } else if (isUnicodeMode) {
        if (Character.isDigit(c) || ApStringLiteral_Behavior.call_isHexChar_1221565869792(thisNode, c)) {
          unicodeDigitNumber++;
        } else {
          return false;
        }
        if (unicodeDigitNumber == 4) {
          isUnicodeMode = false;
          unicodeDigitNumber = 0;
        }
      } else if (c == '"') {
        return false;
      }
    }
    if (isEscapeMode || isUnicodeMode) {
      return false;
    }
    return true;
  }

  public static boolean call_isHexChar_1221565869792(SNode thisNode, char ch) {
    if (Character.isDigit(ch)) {
      return true;
    }
    char lc = Character.toLowerCase(ch);
    return lc >= 'a' && lc <= 'f';
  }
}
