package neo4j.cypher.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class ApStringLiteral__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042432e2L, "neo4j.cypher.structure.ApStringLiteral");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Object> eval_idhEwJgmp = new SMethodBuilder<Object>(new SJavaCompoundTypeImpl(Object.class)).name("eval").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("hEwJgmp").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(SModule.class, ""));
  public static final SMethod<Boolean> isCorrect_idhLEXzwL = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isCorrect").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("hLEXzwL").registry(REGISTRY).build();
  /*package*/ static final SMethod<Boolean> isHexChar_idhLEZYVw = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isHexChar").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("hLEZYVw").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Character.TYPE, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(eval_idhEwJgmp, isCorrect_idhLEXzwL, isHexChar_idhLEZYVw);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Object eval_idhEwJgmp(@NotNull SNode __thisNode__, SModule module) {
    return SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042432e2L, 0x4841a8f10426c043L, "value"));
  }
  /*package*/ static boolean isCorrect_idhLEXzwL(@NotNull SNode __thisNode__) {
    boolean isEscapeMode = false;
    boolean isUnicodeMode = false;
    boolean isSymbolCodeMode = false;
    int digitNumber = 0;
    int unicodeDigitNumber = 0;
    String value = SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042432e2L, 0x4841a8f10426c043L, "value"));
    if (value == null) {
      return true;
    }
    for (int i = 0; i < value.length(); i++) {
      char c = SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042432e2L, 0x4841a8f10426c043L, "value")).charAt(i);
      if (isEscapeMode) {
        if (c == 'u') {
          isUnicodeMode = true;
        } else if (Character.isDigit(c)) {
          isSymbolCodeMode = true;
          digitNumber = 1;
        } else if (c != 'n' && c != 't' && c != 'b' && c != 'f' && c != 'r' && c != '"' && c != '\'' && c != '\\') {
          return false;
        }
        isEscapeMode = false;
      } else if (c == '\\') {
        isEscapeMode = true;
      } else if (isSymbolCodeMode) {
        if (Character.isDigit(c)) {
          digitNumber++;
        } else {
          return false;
        }
        if (digitNumber == 3) {
          isSymbolCodeMode = false;
          digitNumber = 0;
        }
      } else if (isUnicodeMode) {
        if (Character.isDigit(c) || ((boolean) ApStringLiteral__BehaviorDescriptor.isHexChar_idhLEZYVw.invoke(__thisNode__, ((char) c)))) {
          unicodeDigitNumber++;
        } else {
          return false;
        }
        if (unicodeDigitNumber == 4) {
          isUnicodeMode = false;
          unicodeDigitNumber = 0;
        }
      } else if (c == '\'') {
        return false;
      }
    }
    if (isEscapeMode || isUnicodeMode) {
      return false;
    }
    return true;
  }
  /*package*/ static boolean isHexChar_idhLEZYVw(@NotNull SNode __thisNode__, char ch) {
    if (Character.isDigit(ch)) {
      return true;
    }
    char lc = Character.toLowerCase(ch);
    return lc >= 'a' && lc <= 'f';
  }

  /*package*/ ApStringLiteral__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Object) eval_idhEwJgmp(node, (SModule) parameters[0]));
      case 1:
        return (T) ((Boolean) isCorrect_idhLEXzwL(node));
      case 2:
        return (T) ((Boolean) isHexChar_idhLEZYVw(node, ((char) (Character) parameters[0])));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
