package neo4j.cypher.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myKeyValueNodeIndex__BehaviorDescriptor = new KeyValueNodeIndex__BehaviorDescriptor();
  private final BHDescriptor myModifyStringFunction__BehaviorDescriptor = new ModifyStringFunction__BehaviorDescriptor();
  private final BHDescriptor myCypherPlusExpression__BehaviorDescriptor = new CypherPlusExpression__BehaviorDescriptor();
  private final BHDescriptor myCypherIntegerConstant__BehaviorDescriptor = new CypherIntegerConstant__BehaviorDescriptor();
  private final BHDescriptor myIWriteStatement__BehaviorDescriptor = new IWriteStatement__BehaviorDescriptor();
  private final BHDescriptor myReturnStatementBlock__BehaviorDescriptor = new ReturnStatementBlock__BehaviorDescriptor();
  private final BHDescriptor myCreateStatement__BehaviorDescriptor = new CreateStatement__BehaviorDescriptor();
  private final BHDescriptor mySetStatement__BehaviorDescriptor = new SetStatement__BehaviorDescriptor();
  private final BHDescriptor myDeleteStatement__BehaviorDescriptor = new DeleteStatement__BehaviorDescriptor();
  private final BHDescriptor myMatchStatement__BehaviorDescriptor = new MatchStatement__BehaviorDescriptor();
  private final BHDescriptor myWhereStatement__BehaviorDescriptor = new WhereStatement__BehaviorDescriptor();
  private final BHDescriptor myReturnStatement__BehaviorDescriptor = new ReturnStatement__BehaviorDescriptor();
  private final BHDescriptor myStartStatement__BehaviorDescriptor = new StartStatement__BehaviorDescriptor();
  private final BHDescriptor myIPropertyContainer__BehaviorDescriptor = new IPropertyContainer__BehaviorDescriptor();
  private final BHDescriptor myCypherMinusExpression__BehaviorDescriptor = new CypherMinusExpression__BehaviorDescriptor();
  private final BHDescriptor myCypherMulExpression__BehaviorDescriptor = new CypherMulExpression__BehaviorDescriptor();
  private final BHDescriptor myCypherRemExpression__BehaviorDescriptor = new CypherRemExpression__BehaviorDescriptor();
  private final BHDescriptor myApStringLiteral__BehaviorDescriptor = new ApStringLiteral__BehaviorDescriptor();
  private final BHDescriptor myINamedIdentifier__BehaviorDescriptor = new INamedIdentifier__BehaviorDescriptor();
  private final BHDescriptor myINamedNullableIdentifier__BehaviorDescriptor = new INamedNullableIdentifier__BehaviorDescriptor();
  private final BHDescriptor myParameter__BehaviorDescriptor = new Parameter__BehaviorDescriptor();
  private final BHDescriptor myCypherEqualsExpression__BehaviorDescriptor = new CypherEqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myCypherAndExpression__BehaviorDescriptor = new CypherAndExpression__BehaviorDescriptor();
  private final BHDescriptor myCypherOrExpression__BehaviorDescriptor = new CypherOrExpression__BehaviorDescriptor();
  private final BHDescriptor myCypherNotEqualsExpression__BehaviorDescriptor = new CypherNotEqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myCypherStatement__BehaviorDescriptor = new CypherStatement__BehaviorDescriptor();
  private final BHDescriptor myQueryTupleExpression__BehaviorDescriptor = new QueryTupleExpression__BehaviorDescriptor();
  private final BHDescriptor myReadOnlyQueryTupleExpression__BehaviorDescriptor = new ReadOnlyQueryTupleExpression__BehaviorDescriptor();
  private final BHDescriptor myReadWriteQueryTupleExpression__BehaviorDescriptor = new ReadWriteQueryTupleExpression__BehaviorDescriptor();
  private final BHDescriptor myWriteOnlyQueryTupleExpression__BehaviorDescriptor = new WriteOnlyQueryTupleExpression__BehaviorDescriptor();
  private final BHDescriptor myRelationship__BehaviorDescriptor = new Relationship__BehaviorDescriptor();
  private final BHDescriptor myWithStatement__BehaviorDescriptor = new WithStatement__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0jb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myApStringLiteral__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myCreateStatement__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myCypherAndExpression__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myCypherEqualsExpression__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myCypherIntegerConstant__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myCypherMinusExpression__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myCypherMulExpression__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myCypherNotEqualsExpression__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myCypherOrExpression__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myCypherPlusExpression__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myCypherRemExpression__BehaviorDescriptor;
          }
          break;
        case 11:
          if (true) {
            return myCypherStatement__BehaviorDescriptor;
          }
          break;
        case 12:
          if (true) {
            return myDeleteStatement__BehaviorDescriptor;
          }
          break;
        case 13:
          if (true) {
            return myINamedIdentifier__BehaviorDescriptor;
          }
          break;
        case 14:
          if (true) {
            return myINamedNullableIdentifier__BehaviorDescriptor;
          }
          break;
        case 15:
          if (true) {
            return myIPropertyContainer__BehaviorDescriptor;
          }
          break;
        case 16:
          if (true) {
            return myIWriteStatement__BehaviorDescriptor;
          }
          break;
        case 17:
          if (true) {
            return myKeyValueNodeIndex__BehaviorDescriptor;
          }
          break;
        case 18:
          if (true) {
            return myMatchStatement__BehaviorDescriptor;
          }
          break;
        case 19:
          if (true) {
            return myModifyStringFunction__BehaviorDescriptor;
          }
          break;
        case 20:
          if (true) {
            return myParameter__BehaviorDescriptor;
          }
          break;
        case 21:
          if (true) {
            return myQueryTupleExpression__BehaviorDescriptor;
          }
          break;
        case 22:
          if (true) {
            return myReadOnlyQueryTupleExpression__BehaviorDescriptor;
          }
          break;
        case 23:
          if (true) {
            return myReadWriteQueryTupleExpression__BehaviorDescriptor;
          }
          break;
        case 24:
          if (true) {
            return myRelationship__BehaviorDescriptor;
          }
          break;
        case 25:
          if (true) {
            return myReturnStatement__BehaviorDescriptor;
          }
          break;
        case 26:
          if (true) {
            return myReturnStatementBlock__BehaviorDescriptor;
          }
          break;
        case 27:
          if (true) {
            return mySetStatement__BehaviorDescriptor;
          }
          break;
        case 28:
          if (true) {
            return myStartStatement__BehaviorDescriptor;
          }
          break;
        case 29:
          if (true) {
            return myWhereStatement__BehaviorDescriptor;
          }
          break;
        case 30:
          if (true) {
            return myWithStatement__BehaviorDescriptor;
          }
          break;
        case 31:
          if (true) {
            return myWriteOnlyQueryTupleExpression__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0jb = buildConceptIndices(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042432e2L, "neo4j.cypher.structure.ApStringLiteral"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d600d9L, "neo4j.cypher.structure.CreateStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104307f52L, "neo4j.cypher.structure.CypherAndExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1043068f8L, "neo4j.cypher.structure.CypherEqualsExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa51802cL, "neo4j.cypher.structure.CypherIntegerConstant"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x41870286b4384f3bL, "neo4j.cypher.structure.CypherMinusExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x41870286b439172bL, "neo4j.cypher.structure.CypherMulExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104315f07L, "neo4j.cypher.structure.CypherNotEqualsExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104307f56L, "neo4j.cypher.structure.CypherOrExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa50b941L, "neo4j.cypher.structure.CypherPlusExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x41870286b4391732L, "neo4j.cypher.structure.CypherRemExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4cbf2dbb00e54a8bL, "neo4j.cypher.structure.CypherStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d6010bL, "neo4j.cypher.structure.DeleteStatement"), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104282c68L, "neo4j.cypher.structure.INamedIdentifier"), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f10429a6b5L, "neo4j.cypher.structure.INamedNullableIdentifier"), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d300249aaedff40L, "neo4j.cypher.structure.IPropertyContainer"), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa3L, "neo4j.cypher.structure.IWriteStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303bb837eL, "neo4j.cypher.structure.KeyValueNodeIndex"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24307713L, "neo4j.cypher.structure.MatchStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x12636aedaa4dea3fL, "neo4j.cypher.structure.ModifyStringFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042a6ce7L, "neo4j.cypher.structure.Parameter"), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x52178e89215b5fe0L, "neo4j.cypher.structure.QueryTupleExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x52178e89215b6169L, "neo4j.cypher.structure.ReadOnlyQueryTupleExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x52178e89215b61cfL, "neo4j.cypher.structure.ReadWriteQueryTupleExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x637ffba7f2948fabL, "neo4j.cypher.structure.Relationship"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24389e5eL, "neo4j.cypher.structure.ReturnStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2959fa271e1707a3L, "neo4j.cypher.structure.ReturnStatementBlock"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d600edL, "neo4j.cypher.structure.SetStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe2438aca4L, "neo4j.cypher.structure.StartStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24307714L, "neo4j.cypher.structure.WhereStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x682da1dc24319e52L, "neo4j.cypher.structure.WithStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x52178e89215b61ecL, "neo4j.cypher.structure.WriteOnlyQueryTupleExpression"));
}
