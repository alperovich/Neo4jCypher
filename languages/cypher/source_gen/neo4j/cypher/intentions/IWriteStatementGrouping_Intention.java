package neo4j.cypher.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.intentions.IntentionDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class IWriteStatementGrouping_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public IWriteStatementGrouping_Intention() {
  }

  public String getConcept() {
    return "neo4j.cypher.structure.IWriteStatement";
  }

  public String getPresentation() {
    return "IWriteStatementGrouping";
  }

  public String getPersistentStateKey() {
    return "neo4j.cypher.intentions.IWriteStatementGrouping_Intention";
  }

  public String getLanguageFqName() {
    return "neo4j.cypher";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(node), "neo4j.cypher.structure.IWriteStatement");
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:4fb5ec9d-ba5b-4bca-9e48-d719ae880364(neo4j.cypher.intentions)", "8020740480872446728");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IWriteStatementGrouping_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Groups common write statements together";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      final Wrappers._T<SNode> beforeNode = new Wrappers._T<SNode>(null);
      final Wrappers._T<SNode> firstOfGroup = new Wrappers._T<SNode>(null);

      ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(node, "neo4j.cypher.structure.QueryExpression", false, false), "neo4j.cypher.structure.IWriteStatement", false, new String[]{})).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if (LOG.isInfoEnabled()) {
            LOG.info("iwrite node:" + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(it), "conceptAlias") + " idx:" + SNodeOperations.getIndexInParent(it) + " fq concept name:" + BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getConceptDeclaration(it), "virtual_getFqName_1213877404258", new Object[]{}));
          }
          if (beforeNode.value != null) {
            if (BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getConceptDeclaration(beforeNode.value), "virtual_getFqName_1213877404258", new Object[]{}).equals(BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getConceptDeclaration(it), "virtual_getFqName_1213877404258", new Object[]{}))) {
              if (LOG.isInfoEnabled()) {
                LOG.info("yes the same types");
              }

            } else {
              if (LOG.isInfoEnabled()) {
                LOG.info("first of group of the same type");
              }
              firstOfGroup.value = it;
            }
          }
          beforeNode.value = it;

          // grouping starts we group all next group nodes to firstOfGroup node 
          if ((firstOfGroup.value != null) && firstOfGroup.value != it) {
            if (LOG.isInfoEnabled()) {
              LOG.info("grouping");
            }
            BehaviorReflection.invokeVirtual(Void.class, firstOfGroup.value, "virtual_joinWithTheSameNodeType_8020740480872452998", new Object[]{it});
            SNodeOperations.deleteNode(it);
          }
        }
      });
    }

    public IntentionDescriptor getDescriptor() {
      return IWriteStatementGrouping_Intention.this;
    }
  }

  protected static Logger LOG = LogManager.getLogger(IWriteStatementGrouping_Intention.class);
}
