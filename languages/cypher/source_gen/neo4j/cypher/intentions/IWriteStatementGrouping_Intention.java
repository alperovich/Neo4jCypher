package neo4j.cypher.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collections;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.intentions.IntentionExecutableBase;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.core.behavior.INamedConcept__BehaviorDescriptor;
import neo4j.cypher.behavior.IWriteStatement__BehaviorDescriptor;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class IWriteStatementGrouping_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public IWriteStatementGrouping_Intention() {
    super(MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa3L, "neo4j.cypher.structure.IWriteStatement"), IntentionType.NORMAL, false, new SNodePointer("r:4fb5ec9d-ba5b-4bca-9e48-d719ae880364(neo4j.cypher.intentions)", "8020740480872446728"));
  }
  @Override
  public String getPresentation() {
    return "IWriteStatementGrouping";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(node)), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa3L, "neo4j.cypher.structure.IWriteStatement"));
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IWriteStatementGrouping_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  protected static Logger LOG = LogManager.getLogger(IWriteStatementGrouping_Intention.class);
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Groups common write statements together";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      final Wrappers._T<SNode> beforeNode = new Wrappers._T<SNode>(null);
      final Wrappers._T<SNode> firstOfGroup = new Wrappers._T<SNode>(null);

      ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303b87b4fL, "neo4j.cypher.structure.QueryExpression"), false, false), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa3L, "neo4j.cypher.structure.IWriteStatement"), false, new SAbstractConcept[]{})).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if (LOG.isInfoEnabled()) {
            LOG.info("iwrite node:" + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(it), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x46ab0ad5826c74caL, "conceptAlias")) + " idx:" + SNodeOperations.getIndexInParent(it) + " fq concept name:" + INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(it))));
          }
          if (beforeNode.value != null) {
            if (INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(beforeNode.value))).equals(INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(it))))) {
              if (LOG.isInfoEnabled()) {
                LOG.info("yes the same types");
              }

            } else {
              if (LOG.isInfoEnabled()) {
                LOG.info("first of group of the same type");
              }
              firstOfGroup.value = it;
            }
          }
          beforeNode.value = it;

          // grouping starts we group all next group nodes to firstOfGroup node 
          if ((firstOfGroup.value != null) && firstOfGroup.value != it) {
            if (LOG.isInfoEnabled()) {
              LOG.info("grouping");
            }
            IWriteStatement__BehaviorDescriptor.joinWithTheSameNodeType_id6XfpfyXZTe6.invoke(firstOfGroup.value, it);
            SNodeOperations.deleteNode(it);
          }
        }
      });
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return IWriteStatementGrouping_Intention.this;
    }
  }
}
