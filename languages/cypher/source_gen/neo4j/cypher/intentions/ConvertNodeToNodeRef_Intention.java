package neo4j.cypher.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ConvertNodeToNodeRef_Intention extends BaseIntention implements Intention {
  public ConvertNodeToNodeRef_Intention() {
  }

  public String getConcept() {
    return "neo4j.cypher.structure.Node";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Converts node into node reference of the same name";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    List<SNode> nameNodes = SNodeOperations.getDescendants(SNodeOperations.getAncestor(node, "neo4j.cypher.structure.QueryExpression", false, false), "neo4j.cypher.structure.Node", false, new String[]{});

    for (SNode namedNode : nameNodes) {
      if (namedNode == node) {
        break;
      } else {
        if (SPropertyOperations.getString(namedNode, "name").equals(SPropertyOperations.getString(node, "name"))) {
          SNode newNodeRef = SConceptOperations.createNewNode("neo4j.cypher.structure.NamedNodeRef", null);
          SLinkOperations.setTarget(newNodeRef, "node1", namedNode, false);
          SNodeOperations.replaceWithAnother(node, newNodeRef);
          break;
        }
      }

    }
  }

  public String getLocationString() {
    return "neo4j.cypher.intentions";
  }
}
