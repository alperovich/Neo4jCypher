package neo4j.cypher.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_hphjzv_d0f.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            // Concept: ApStringLiteral 
            intentions = new IntentionFactory[1];
            intentions[0] = new SplitApStringIntoContatenation_Intention();
          }
          break;
        case 1:
          if (true) {
            // Concept: AscOrderBy 
            intentions = new IntentionFactory[1];
            intentions[0] = new Asc2Desc_Intention();
          }
          break;
        case 2:
          if (true) {
            // Concept: CreateStatement 
            intentions = new IntentionFactory[1];
            intentions[0] = new SwitchCreateCreateUnique_Intention();
          }
          break;
        case 3:
          if (true) {
            // Concept: DescOrderBy 
            intentions = new IntentionFactory[1];
            intentions[0] = new Desc2Asc_Intention();
          }
          break;
        case 4:
          if (true) {
            // Concept: IWriteStatement 
            intentions = new IntentionFactory[1];
            intentions[0] = new IWriteStatementGrouping_Intention();
          }
          break;
        case 5:
          if (true) {
            // Concept: Node 
            intentions = new IntentionFactory[2];
            intentions[0] = new ConvertNodeToNodeRef_Intention();
            intentions[1] = new SwitchNodeInDefinitionMode_Intention();
          }
          break;
        case 6:
          if (true) {
            // Concept: PathExpression 
            intentions = new IntentionFactory[1];
            intentions[0] = new SwitchNamedPath_Intention();
          }
          break;
        case 7:
          if (true) {
            // Concept: ReadOnlyQueryExpression 
            intentions = new IntentionFactory[1];
            intentions[0] = new ConvertReadOnly2ReadWriteQuery_Intention();
          }
          break;
        case 8:
          if (true) {
            // Concept: ReadWriteQueryExpression 
            intentions = new IntentionFactory[2];
            intentions[0] = new ConvertReadWrite2ReadOnlyQuery_Intention();
            intentions[1] = new ConvertReadWrite2WriteOnlyQuery_Intention();
          }
          break;
        case 9:
          if (true) {
            // Concept: Relationship 
            intentions = new IntentionFactory[7];
            intentions[0] = new ConvertToLRRelationship_Intention();
            intentions[1] = new ConvertToRLRelationship_Intention();
            intentions[2] = new ConvertToUndirectedRelationship_Intention();
            intentions[3] = new MakeUntypedRelationship_Intention();
            intentions[4] = new SwitchAnonymousConcreteRelationship_Intention();
            intentions[5] = new SwitchRelationshipHops_Intention();
            intentions[6] = new SwitchRelationshipInDefinitionMode_Intention();
          }
          break;
        case 10:
          if (true) {
            // Concept: WriteOnlyQueryExpression 
            intentions = new IntentionFactory[1];
            intentions[0] = new ConvertWriteOnly2ReadWriteQuery_Intention();
          }
          break;
        default:
          // default 
      }
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[19];
    rv[0] = new Asc2Desc_Intention();
    rv[1] = new Desc2Asc_Intention();
    rv[2] = new SplitApStringIntoContatenation_Intention();
    rv[3] = new ConvertToLRRelationship_Intention();
    rv[4] = new ConvertToRLRelationship_Intention();
    rv[5] = new ConvertToUndirectedRelationship_Intention();
    rv[6] = new MakeUntypedRelationship_Intention();
    rv[7] = new SwitchAnonymousConcreteRelationship_Intention();
    rv[8] = new SwitchRelationshipHops_Intention();
    rv[9] = new SwitchNamedPath_Intention();
    rv[10] = new ConvertNodeToNodeRef_Intention();
    rv[11] = new SwitchCreateCreateUnique_Intention();
    rv[12] = new SwitchNodeInDefinitionMode_Intention();
    rv[13] = new SwitchRelationshipInDefinitionMode_Intention();
    rv[14] = new IWriteStatementGrouping_Intention();
    rv[15] = new ConvertReadWrite2ReadOnlyQuery_Intention();
    rv[16] = new ConvertReadWrite2WriteOnlyQuery_Intention();
    rv[17] = new ConvertReadOnly2ReadWriteQuery_Intention();
    rv[18] = new ConvertWriteOnly2ReadWriteQuery_Intention();
    return Arrays.asList(rv);
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_hphjzv_d0f = buildConceptIndices(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f1042432e2L, "neo4j.cypher.structure.ApStringLiteral"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6607a8a1c5b01e59L, "neo4j.cypher.structure.AscOrderBy"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d600d9L, "neo4j.cypher.structure.CreateStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6607a8a1c5b01e63L, "neo4j.cypher.structure.DescOrderBy"), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa3L, "neo4j.cypher.structure.IWriteStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e11L, "neo4j.cypher.structure.Node"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da444f2L, "neo4j.cypher.structure.PathExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e05L, "neo4j.cypher.structure.ReadOnlyQueryExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, "neo4j.cypher.structure.ReadWriteQueryExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x637ffba7f2948fabL, "neo4j.cypher.structure.Relationship"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa5L, "neo4j.cypher.structure.WriteOnlyQueryExpression"));
}
