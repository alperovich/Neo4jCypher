package neo4j.cypher.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class ConvertReadWrite2WriteOnlyQuery_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ConvertReadWrite2WriteOnlyQuery_Intention() {
    super(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, "neo4j.cypher.structure.ReadWriteQueryExpression"), IntentionType.NORMAL, false, new SNodePointer("r:4fb5ec9d-ba5b-4bca-9e48-d719ae880364(neo4j.cypher.intentions)", "4768758963660704603"));
  }
  @Override
  public String getPresentation() {
    return "ConvertReadWrite2WriteOnlyQuery";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertReadWrite2WriteOnlyQuery_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Converts read write query into write only query";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode writeOnlyQueryExpression = SNodeFactoryOperations.replaceWithNewChild(node, SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa5L, "neo4j.cypher.structure.WriteOnlyQueryExpression")));

      ListSequence.fromList(SLinkOperations.getChildren(writeOnlyQueryExpression, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa5L, 0x2376f01d7fbe30a0L, "writeStatement"))).clear();
      // if first element is create statement -> set it into writeOnlyQuery create statement 
      if (ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, 0x3528712027d6011dL, "writeStatement"))).count() > 0 && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, 0x3528712027d6011dL, "writeStatement"))).first(), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d600d9L, "neo4j.cypher.structure.CreateStatement"))) {
        SLinkOperations.setTarget(writeOnlyQueryExpression, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa5L, 0x2376f01d7fbe309fL, "createStatement"), SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, 0x3528712027d6011dL, "writeStatement"))).removeElementAt(0), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d600d9L, "neo4j.cypher.structure.CreateStatement")));
      }

      ListSequence.fromList(SLinkOperations.getChildren(writeOnlyQueryExpression, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2376f01d7fbd1fa5L, 0x2376f01d7fbe30a0L, "writeStatement"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, 0x3528712027d6011dL, "writeStatement"))));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return ConvertReadWrite2WriteOnlyQuery_Intention.this;
    }
  }
}
