package neo4j.cypher.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ConvertToUndirectedRelationship_Intention extends BaseIntention implements Intention {
  public ConvertToUndirectedRelationship_Intention() {
  }

  public String getConcept() {
    return "neo4j.cypher.structure.Relationship";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Converts relationship to undirected type";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return !(SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(node), "neo4j.cypher.structure.UndirectedRelationship"));
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode lrRelationship = SNodeFactoryOperations.replaceWithNewChild(node, "neo4j.cypher.structure.UndirectedRelationship");
    SPropertyOperations.set(lrRelationship, "name", SPropertyOperations.getString(node, "name"));
    ListSequence.fromList(SLinkOperations.getTargets(lrRelationship, "property", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "property", true)));
    ListSequence.fromList(SLinkOperations.getTargets(lrRelationship, "type", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "type", true)));

  }

  public String getLocationString() {
    return "neo4j.cypher.intentions";
  }
}
