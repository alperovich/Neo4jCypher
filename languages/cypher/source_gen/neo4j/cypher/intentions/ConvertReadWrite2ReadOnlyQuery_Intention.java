package neo4j.cypher.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class ConvertReadWrite2ReadOnlyQuery_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ConvertReadWrite2ReadOnlyQuery_Intention() {
    super(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, "neo4j.cypher.structure.ReadWriteQueryExpression"), IntentionType.NORMAL, false, new SNodePointer("r:4fb5ec9d-ba5b-4bca-9e48-d719ae880364(neo4j.cypher.intentions)", "4768758963660137382"));
  }
  @Override
  public String getPresentation() {
    return "ConvertReadWrite2ReadOnlyQuery";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertReadWrite2ReadOnlyQuery_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Converts read write query into read only query";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode readOnlyQueryExpression = SNodeFactoryOperations.replaceWithNewChild(node, SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e05L, "neo4j.cypher.structure.ReadOnlyQueryExpression")));

      SLinkOperations.setTarget(readOnlyQueryExpression, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e05L, 0x40adc46d80ea8abeL, "startStatement"), SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, 0x40adc46d80ea8ac0L, "startStatement")));
      SLinkOperations.setTarget(readOnlyQueryExpression, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e05L, 0x3d018fbe24317aecL, "matchStatement"), SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, 0x3528712027d600d4L, "matchStatement")));
      SLinkOperations.setTarget(readOnlyQueryExpression, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e05L, 0x3d018fbe24317aedL, "whereStatement"), SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, 0x3528712027d600d6L, "whereStatement")));
      SLinkOperations.setTarget(readOnlyQueryExpression, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e05L, 0x3d018fbe2438ac9fL, "returnStatementBlock"), SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e06L, 0x3528712027d600d8L, "returnStatementBlock")));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return ConvertReadWrite2ReadOnlyQuery_Intention.this;
    }
  }
}
