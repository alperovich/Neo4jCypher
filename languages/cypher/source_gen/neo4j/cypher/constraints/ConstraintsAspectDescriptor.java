package neo4j.cypher.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_2qnle6_a0c.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return new AggregateFunction_Constraints();
          }
          break;
        case 1:
          if (true) {
            return new CreateStatement_Constraints();
          }
          break;
        case 2:
          if (true) {
            return new CypherQueryExecuteMethod_Constraints();
          }
          break;
        case 3:
          if (true) {
            return new CypherResultIteratorHasNextMethod_Constraints();
          }
          break;
        case 4:
          if (true) {
            return new CypherResultIteratorMethod_Constraints();
          }
          break;
        case 5:
          if (true) {
            return new CypherResultIteratorNextMethod_Constraints();
          }
          break;
        case 6:
          if (true) {
            return new DeleteStatement_Constraints();
          }
          break;
        case 7:
          if (true) {
            return new ICypherExpression_Constraints();
          }
          break;
        case 8:
          if (true) {
            return new INamedIdentifier_Constraints();
          }
          break;
        case 9:
          if (true) {
            return new INamedNullableIdentifier_Constraints();
          }
          break;
        case 10:
          if (true) {
            return new NamedNodeRef_Constraints();
          }
          break;
        case 11:
          if (true) {
            return new NamedPathRef_Constraints();
          }
          break;
        case 12:
          if (true) {
            return new NamedPropertyContainerRef_Constraints();
          }
          break;
        case 13:
          if (true) {
            return new NamedRelationshipRef_Constraints();
          }
          break;
        case 14:
          if (true) {
            return new Node_Constraints();
          }
          break;
        case 15:
          if (true) {
            return new OrderByExpression_Constraints();
          }
          break;
        case 16:
          if (true) {
            return new OrderByStatement_Constraints();
          }
          break;
        case 17:
          if (true) {
            return new PathExpression_Constraints();
          }
          break;
        case 18:
          if (true) {
            return new PathFunction_Constraints();
          }
          break;
        case 19:
          if (true) {
            return new PropertyOperation_Constraints();
          }
          break;
        case 20:
          if (true) {
            return new Relationship_Constraints();
          }
          break;
        case 21:
          if (true) {
            return new ReturnStatement_Constraints();
          }
          break;
        case 22:
          if (true) {
            return new SetAssignmentStatement_Constraints();
          }
          break;
        case 23:
          if (true) {
            return new StartAssignmentStatement_Constraints();
          }
          break;
        case 24:
          if (true) {
            return new WhereStatement_Constraints();
          }
          break;
        case 25:
          if (true) {
            return new WithStatement_Constraints();
          }
          break;
        default:
          // default 
      }
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_2qnle6_a0c = buildConceptIndices(MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2546b228cbcc89daL, "neo4j.cypher.structure.AggregateFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d600d9L, "neo4j.cypher.structure.CreateStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3340f286fb406a31L, "neo4j.cypher.structure.CypherQueryExecuteMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b0458d7eL, "neo4j.cypher.structure.CypherResultIteratorHasNextMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b02c7309L, "neo4j.cypher.structure.CypherResultIteratorMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x1af46b20b0587485L, "neo4j.cypher.structure.CypherResultIteratorNextMethod"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3528712027d6010bL, "neo4j.cypher.structure.DeleteStatement"), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4cbf2dbb00e3a2beL, "neo4j.cypher.structure.ICypherExpression"), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f104282c68L, "neo4j.cypher.structure.INamedIdentifier"), MetaAdapterFactory.getInterfaceConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4841a8f10429a6b5L, "neo4j.cypher.structure.INamedNullableIdentifier"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe2434a1cdL, "neo4j.cypher.structure.NamedNodeRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da6df9bL, "neo4j.cypher.structure.NamedPathRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c16436L, "neo4j.cypher.structure.NamedPropertyContainerRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x6de5edabd1c16494L, "neo4j.cypher.structure.NamedRelationshipRef"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e11L, "neo4j.cypher.structure.Node"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24314ff0L, "neo4j.cypher.structure.OrderByExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x4cbf2dbb00e59362L, "neo4j.cypher.structure.OrderByStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da444f2L, "neo4j.cypher.structure.PathExpression"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x432a0a2a4da776d7L, "neo4j.cypher.structure.PathFunction"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x2bf84db8340e211fL, "neo4j.cypher.structure.PropertyOperation"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x637ffba7f2948fabL, "neo4j.cypher.structure.Relationship"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24389e5eL, "neo4j.cypher.structure.ReturnStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0xaaeb60067637537L, "neo4j.cypher.structure.SetAssignmentStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x119ac58303ba8e10L, "neo4j.cypher.structure.StartAssignmentStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x3d018fbe24307714L, "neo4j.cypher.structure.WhereStatement"), MetaAdapterFactory.getConcept(0xfa0e36f72d65493aL, 0x86382d9c4dbffdf7L, 0x682da1dc24319e52L, "neo4j.cypher.structure.WithStatement"));
}
