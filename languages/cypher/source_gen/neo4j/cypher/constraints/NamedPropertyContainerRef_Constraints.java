package neo4j.cypher.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.SNodePointer;

public class NamedPropertyContainerRef_Constraints extends BaseConstraintsDescriptor {
  public NamedPropertyContainerRef_Constraints() {
    super("neo4j.cypher.structure.NamedPropertyContainerRef");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("propertyContainer", new BaseReferenceConstraintsDescriptor("propertyContainer", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            // <node> 

            if (SNodeOperations.isInstanceOf(_context.getContextNode(), "neo4j.cypher.structure.NamedPropertyContainerRef")) {
              if (LOG.isInfoEnabled()) {
                LOG.info("reference for propcontainer name:" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(_context.getContextNode(), "neo4j.cypher.structure.NamedPropertyContainerRef"), "propertyContainer", false), "name"));
              }
            }

            // order for reference visibility 
            final SNode currCypherStatement = (SNodeOperations.isInstanceOf(_context.getContextNode(), "neo4j.cypher.structure.CypherStatement") ?
              SNodeOperations.cast(_context.getContextNode(), "neo4j.cypher.structure.CypherStatement") :
              SNodeOperations.getAncestor(_context.getContextNode(), "neo4j.cypher.structure.CypherStatement", false, false)
            );
            if ((currCypherStatement == null)) {
              if (LOG.isInfoEnabled()) {
                LOG.info("curr cypher statement is null");
              }
            }
            final int currCypherStatementOrder = BehaviorReflection.invokeVirtual(Integer.TYPE, currCypherStatement, "virtual_getOrder_6384283002380928985", new Object[]{});

            final List<SNode> nodes = new ArrayList<SNode>();

            // traversing all nodes, add reference to that which have less or equal ordering number 
            ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getContextNode(), "neo4j.cypher.structure.QueryExpression", false, false), "neo4j.cypher.structure.CypherStatement", false, new String[]{})).visitAll(new IVisitor<SNode>() {
              public void visit(SNode it) {
                int currNodeOrder = BehaviorReflection.invokeVirtual(Integer.TYPE, SNodeOperations.cast(it, "neo4j.cypher.structure.CypherStatement"), "virtual_getOrder_6384283002380928985", new Object[]{});

                boolean addAll = false;

                if (LOG.isInfoEnabled()) {
                  LOG.info("currNodeOrder:" + currNodeOrder + " alias:" + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(it), "conceptAlias") + " curr cypher statement:" + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(currCypherStatement), "conceptAlias") + " order:" + currCypherStatementOrder);
                }


                if (currNodeOrder < currCypherStatementOrder) {
                  addAll = true;
                } else if (currNodeOrder == currCypherStatementOrder) {
                  if (LOG.isInfoEnabled()) {
                    LOG.info("the same orders, indeces of them are (curr node order, reference node order): " + SNodeOperations.getIndexInParent(currCypherStatement) + " " + SNodeOperations.getIndexInParent(it));
                  }

                  if (SNodeOperations.getIndexInParent(it) <= SNodeOperations.getIndexInParent(currCypherStatement)) {
                    if (LOG.isInfoEnabled()) {
                      LOG.info("added nodes with indeces");
                    }
                    addAll = true;
                  }
                }

                if (addAll) {
                  ListSequence.fromList(nodes).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(it, "neo4j.cypher.structure.IPropertyContainer", false, new String[]{})).where(new IWhereFilter<SNode>() {
                    public boolean accept(SNode it) {
                      return isNotEmpty_gvwt0r_a0a0a0a0a0a0a0j0a0a0a0m0a0a0a0b0a1a0b0b(SPropertyOperations.getString(it, "name"));
                    }
                  }));
                }
              }
            });

            ListSequence.fromList(nodes).visitAll(new IVisitor<SNode>() {
              public void visit(SNode it) {
                SNode cypherStatement = SNodeOperations.getAncestor(it, "neo4j.cypher.structure.CypherStatement", false, false);
                SNodeOperations.getIndexInParent(cypherStatement);
                if (LOG.isInfoEnabled()) {
                  LOG.info("node:" + SPropertyOperations.getString(it, "name") + " statement:" + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(cypherStatement), "conceptAlias") + " index:" + SNodeOperations.getIndexInParent(cypherStatement) + " parent alias:" + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(cypherStatement)), "conceptAlias") + " curr pos Order:" + currCypherStatementOrder);
                }

              }
            });

            return nodes;
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_gvwt0r_a0a1a0a0a1a0b0a1a1;
          }
        };
      }
    });
    return references;
  }

  protected static Logger LOG = LogManager.getLogger(NamedPropertyContainerRef_Constraints.class);
  private static SNodePointer breakingNode_gvwt0r_a0a1a0a0a1a0b0a1a1 = new SNodePointer("r:7c28ecee-5ab5-4b97-b9e6-691aea2e2951(neo4j.cypher.constraints)", "4839691926370503392");

  public static boolean isNotEmpty_gvwt0r_a0a0a0a0a0a0a0a0a0a0b0a1a0b0b(String str) {
    return str != null && str.length() > 0;
  }

  public static boolean isNotEmpty_gvwt0r_a0a0a0a0a0a0a0j0a0a0a0m0a0a0a0b0a1a0b0b(String str) {
    return str != null && str.length() > 0;
  }
}
